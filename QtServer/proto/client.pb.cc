// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Xenophobia {

namespace {

const ::google::protobuf::Descriptor* RegisterName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterName_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterName_descriptor_ = file->message_type(0);
  static const int RegisterName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, name_),
  };
  RegisterName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterName_descriptor_,
      RegisterName::default_instance_,
      RegisterName_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, _is_default_instance_));
  RegisterRole_descriptor_ = file->message_type(1);
  static const int RegisterRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, role_),
  };
  RegisterRole_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRole_descriptor_,
      RegisterRole::default_instance_,
      RegisterRole_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterRole),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, _is_default_instance_));
  DoAction_descriptor_ = file->message_type(2);
  static const int DoAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, targets_),
  };
  DoAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoAction_descriptor_,
      DoAction::default_instance_,
      DoAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(DoAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, _is_default_instance_));
  ClientMessage_descriptor_ = file->message_type(3);
  static const int ClientMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, reg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, reg_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, do_action_),
  };
  ClientMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _is_default_instance_));
  ClientMessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterName_descriptor_, &RegisterName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRole_descriptor_, &RegisterRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoAction_descriptor_, &DoAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientMessage_descriptor_, &ClientMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete RegisterName::default_instance_;
  delete RegisterName_reflection_;
  delete RegisterRole::default_instance_;
  delete RegisterRole_reflection_;
  delete DoAction::default_instance_;
  delete DoAction_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::types::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\nXenophobia\032\013types.proto\""
    "\034\n\014RegisterName\022\014\n\004name\030\001 \001(\t\")\n\014Registe"
    "rRole\022\031\n\004role\030\001 \001(\0162\013.types.Role\"e\n\010DoAc"
    "tion\022\035\n\006action\030\001 \001(\0162\r.types.Action\022\031\n\004i"
    "tem\030\002 \001(\0162\013.types.Item\022\037\n\007targets\030\003 \003(\0132"
    "\016.types.ITarget\"\275\001\n\rClientMessage\022+\n\004typ"
    "e\030\001 \001(\0162\035.Xenophobia.ClientMessageType\022*"
    "\n\010reg_name\030\002 \001(\0132\030.Xenophobia.RegisterNa"
    "me\022*\n\010reg_role\030\003 \001(\0132\030.Xenophobia.Regist"
    "erRole\022\'\n\tdo_action\030\004 \001(\0132\024.Xenophobia.D"
    "oAction*g\n\021ClientMessageType\022\025\n\021CMT_REGI"
    "STER_NAME\020\000\022\024\n\020CMT_RegisterRole\020\001\022\022\n\016CMT"
    "_DISCONNECT\020\002\022\021\n\rCMT_DO_ACTION\020\003P\000b\006prot"
    "o3", 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  RegisterName::default_instance_ = new RegisterName();
  RegisterRole::default_instance_ = new RegisterRole();
  DoAction::default_instance_ = new DoAction();
  ClientMessage::default_instance_ = new ClientMessage();
  RegisterName::default_instance_->InitAsDefaultInstance();
  RegisterRole::default_instance_->InitAsDefaultInstance();
  DoAction::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;
const ::google::protobuf::EnumDescriptor* ClientMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessageType_descriptor_;
}
bool ClientMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterName::RegisterName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterName)
}

void RegisterName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterName::RegisterName(const RegisterName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterName)
}

void RegisterName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterName::~RegisterName() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterName)
  SharedDtor();
}

void RegisterName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterName_descriptor_;
}

const RegisterName& RegisterName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RegisterName* RegisterName::default_instance_ = NULL;

RegisterName* RegisterName::New(::google::protobuf::Arena* arena) const {
  RegisterName* n = new RegisterName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterName::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Xenophobia.RegisterName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterName)
  return false;
#undef DO_
}

void RegisterName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.RegisterName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterName)
}

::google::protobuf::uint8* RegisterName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.RegisterName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterName)
  return target;
}

int RegisterName::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterName::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterName>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterName::MergeFrom(const RegisterName& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RegisterName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterName::CopyFrom(const RegisterName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterName::IsInitialized() const {

  return true;
}

void RegisterName::Swap(RegisterName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterName::InternalSwap(RegisterName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterName_descriptor_;
  metadata.reflection = RegisterName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterName

// optional string name = 1;
void RegisterName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterName::name() const {
  // @@protoc_insertion_point(field_get:Xenophobia.RegisterName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Xenophobia.RegisterName.name)
}
 void RegisterName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xenophobia.RegisterName.name)
}
 void RegisterName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xenophobia.RegisterName.name)
}
 ::std::string* RegisterName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Xenophobia.RegisterName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterName::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.RegisterName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRole::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRole::RegisterRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterRole)
}

void RegisterRole::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRole::RegisterRole(const RegisterRole& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterRole)
}

void RegisterRole::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  role_ = 0;
}

RegisterRole::~RegisterRole() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterRole)
  SharedDtor();
}

void RegisterRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRole_descriptor_;
}

const RegisterRole& RegisterRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RegisterRole* RegisterRole::default_instance_ = NULL;

RegisterRole* RegisterRole::New(::google::protobuf::Arena* arena) const {
  RegisterRole* n = new RegisterRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRole::Clear() {
  role_ = 0;
}

bool RegisterRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Role role = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::types::Role >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterRole)
  return false;
#undef DO_
}

void RegisterRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterRole)
  // optional .types.Role role = 1;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterRole)
}

::google::protobuf::uint8* RegisterRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterRole)
  // optional .types.Role role = 1;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterRole)
  return target;
}

int RegisterRole::ByteSize() const {
  int total_size = 0;

  // optional .types.Role role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRole::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterRole* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRole>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRole::MergeFrom(const RegisterRole& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void RegisterRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRole::CopyFrom(const RegisterRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRole::IsInitialized() const {

  return true;
}

void RegisterRole::Swap(RegisterRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRole::InternalSwap(RegisterRole* other) {
  std::swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRole_descriptor_;
  metadata.reflection = RegisterRole_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRole

// optional .types.Role role = 1;
void RegisterRole::clear_role() {
  role_ = 0;
}
 ::types::Role RegisterRole::role() const {
  // @@protoc_insertion_point(field_get:Xenophobia.RegisterRole.role)
  return static_cast< ::types::Role >(role_);
}
 void RegisterRole::set_role(::types::Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.RegisterRole.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoAction::kActionFieldNumber;
const int DoAction::kItemFieldNumber;
const int DoAction::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoAction::DoAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.DoAction)
}

void DoAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DoAction::DoAction(const DoAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.DoAction)
}

void DoAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  action_ = 0;
  item_ = 0;
}

DoAction::~DoAction() {
  // @@protoc_insertion_point(destructor:Xenophobia.DoAction)
  SharedDtor();
}

void DoAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoAction_descriptor_;
}

const DoAction& DoAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

DoAction* DoAction::default_instance_ = NULL;

DoAction* DoAction::New(::google::protobuf::Arena* arena) const {
  DoAction* n = new DoAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DoAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(action_, item_);

#undef ZR_HELPER_
#undef ZR_

  targets_.Clear();
}

bool DoAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.DoAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::types::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional .types.Item item = 2;
      case 2: {
        if (tag == 16) {
         parse_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item(static_cast< ::types::Item >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .types.ITarget targets = 3;
      case 3: {
        if (tag == 26) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.DoAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.DoAction)
  return false;
#undef DO_
}

void DoAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.DoAction)
  // optional .types.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->item(), output);
  }

  // repeated .types.ITarget targets = 3;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.DoAction)
}

::google::protobuf::uint8* DoAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.DoAction)
  // optional .types.Action action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->item(), target);
  }

  // repeated .types.ITarget targets = 3;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.DoAction)
  return target;
}

int DoAction::ByteSize() const {
  int total_size = 0;

  // optional .types.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item());
  }

  // repeated .types.ITarget targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoAction::MergeFrom(const DoAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targets_.MergeFrom(from.targets_);
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
}

void DoAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoAction::CopyFrom(const DoAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoAction::IsInitialized() const {

  return true;
}

void DoAction::Swap(DoAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoAction::InternalSwap(DoAction* other) {
  std::swap(action_, other->action_);
  std::swap(item_, other->item_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoAction_descriptor_;
  metadata.reflection = DoAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoAction

// optional .types.Action action = 1;
void DoAction::clear_action() {
  action_ = 0;
}
 ::types::Action DoAction::action() const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.action)
  return static_cast< ::types::Action >(action_);
}
 void DoAction::set_action(::types::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.DoAction.action)
}

// optional .types.Item item = 2;
void DoAction::clear_item() {
  item_ = 0;
}
 ::types::Item DoAction::item() const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.item)
  return static_cast< ::types::Item >(item_);
}
 void DoAction::set_item(::types::Item value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.DoAction.item)
}

// repeated .types.ITarget targets = 3;
int DoAction::targets_size() const {
  return targets_.size();
}
void DoAction::clear_targets() {
  targets_.Clear();
}
const ::types::ITarget& DoAction::targets(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.targets)
  return targets_.Get(index);
}
::types::ITarget* DoAction::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:Xenophobia.DoAction.targets)
  return targets_.Mutable(index);
}
::types::ITarget* DoAction::add_targets() {
  // @@protoc_insertion_point(field_add:Xenophobia.DoAction.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::types::ITarget >*
DoAction::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.DoAction.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::types::ITarget >&
DoAction::targets() const {
  // @@protoc_insertion_point(field_list:Xenophobia.DoAction.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMessage::kTypeFieldNumber;
const int ClientMessage::kRegNameFieldNumber;
const int ClientMessage::kRegRoleFieldNumber;
const int ClientMessage::kDoActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessage::ClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.ClientMessage)
}

void ClientMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reg_name_ = const_cast< ::Xenophobia::RegisterName*>(&::Xenophobia::RegisterName::default_instance());
  reg_role_ = const_cast< ::Xenophobia::RegisterRole*>(&::Xenophobia::RegisterRole::default_instance());
  do_action_ = const_cast< ::Xenophobia::DoAction*>(&::Xenophobia::DoAction::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.ClientMessage)
}

void ClientMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  reg_name_ = NULL;
  reg_role_ = NULL;
  do_action_ = NULL;
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:Xenophobia.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete reg_name_;
    delete reg_role_;
    delete do_action_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New(::google::protobuf::Arena* arena) const {
  ClientMessage* n = new ClientMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMessage::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && reg_name_ != NULL) delete reg_name_;
  reg_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && reg_role_ != NULL) delete reg_role_;
  reg_role_ = NULL;
  if (GetArenaNoVirtual() == NULL && do_action_ != NULL) delete do_action_;
  do_action_ = NULL;
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.ClientMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.ClientMessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::ClientMessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reg_name;
        break;
      }

      // optional .Xenophobia.RegisterName reg_name = 2;
      case 2: {
        if (tag == 18) {
         parse_reg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reg_role;
        break;
      }

      // optional .Xenophobia.RegisterRole reg_role = 3;
      case 3: {
        if (tag == 26) {
         parse_reg_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_do_action;
        break;
      }

      // optional .Xenophobia.DoAction do_action = 4;
      case 4: {
        if (tag == 34) {
         parse_do_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_do_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.ClientMessage)
  // optional .Xenophobia.ClientMessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Xenophobia.RegisterName reg_name = 2;
  if (this->has_reg_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reg_name_, output);
  }

  // optional .Xenophobia.RegisterRole reg_role = 3;
  if (this->has_reg_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reg_role_, output);
  }

  // optional .Xenophobia.DoAction do_action = 4;
  if (this->has_do_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->do_action_, output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.ClientMessage)
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.ClientMessage)
  // optional .Xenophobia.ClientMessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Xenophobia.RegisterName reg_name = 2;
  if (this->has_reg_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->reg_name_, target);
  }

  // optional .Xenophobia.RegisterRole reg_role = 3;
  if (this->has_reg_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->reg_role_, target);
  }

  // optional .Xenophobia.DoAction do_action = 4;
  if (this->has_do_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->do_action_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.ClientMessage)
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.ClientMessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .Xenophobia.RegisterName reg_name = 2;
  if (this->has_reg_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reg_name_);
  }

  // optional .Xenophobia.RegisterRole reg_role = 3;
  if (this->has_reg_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reg_role_);
  }

  // optional .Xenophobia.DoAction do_action = 4;
  if (this->has_do_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->do_action_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_reg_name()) {
    mutable_reg_name()->::Xenophobia::RegisterName::MergeFrom(from.reg_name());
  }
  if (from.has_reg_role()) {
    mutable_reg_role()->::Xenophobia::RegisterRole::MergeFrom(from.reg_role());
  }
  if (from.has_do_action()) {
    mutable_do_action()->::Xenophobia::DoAction::MergeFrom(from.do_action());
  }
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {

  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessage::InternalSwap(ClientMessage* other) {
  std::swap(type_, other->type_);
  std::swap(reg_name_, other->reg_name_);
  std::swap(reg_role_, other->reg_role_);
  std::swap(do_action_, other->do_action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMessage

// optional .Xenophobia.ClientMessageType type = 1;
void ClientMessage::clear_type() {
  type_ = 0;
}
 ::Xenophobia::ClientMessageType ClientMessage::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ClientMessage.type)
  return static_cast< ::Xenophobia::ClientMessageType >(type_);
}
 void ClientMessage::set_type(::Xenophobia::ClientMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.ClientMessage.type)
}

// optional .Xenophobia.RegisterName reg_name = 2;
bool ClientMessage::has_reg_name() const {
  return !_is_default_instance_ && reg_name_ != NULL;
}
void ClientMessage::clear_reg_name() {
  if (GetArenaNoVirtual() == NULL && reg_name_ != NULL) delete reg_name_;
  reg_name_ = NULL;
}
const ::Xenophobia::RegisterName& ClientMessage::reg_name() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ClientMessage.reg_name)
  return reg_name_ != NULL ? *reg_name_ : *default_instance_->reg_name_;
}
::Xenophobia::RegisterName* ClientMessage::mutable_reg_name() {
  
  if (reg_name_ == NULL) {
    reg_name_ = new ::Xenophobia::RegisterName;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ClientMessage.reg_name)
  return reg_name_;
}
::Xenophobia::RegisterName* ClientMessage::release_reg_name() {
  
  ::Xenophobia::RegisterName* temp = reg_name_;
  reg_name_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_reg_name(::Xenophobia::RegisterName* reg_name) {
  delete reg_name_;
  reg_name_ = reg_name;
  if (reg_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ClientMessage.reg_name)
}

// optional .Xenophobia.RegisterRole reg_role = 3;
bool ClientMessage::has_reg_role() const {
  return !_is_default_instance_ && reg_role_ != NULL;
}
void ClientMessage::clear_reg_role() {
  if (GetArenaNoVirtual() == NULL && reg_role_ != NULL) delete reg_role_;
  reg_role_ = NULL;
}
const ::Xenophobia::RegisterRole& ClientMessage::reg_role() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ClientMessage.reg_role)
  return reg_role_ != NULL ? *reg_role_ : *default_instance_->reg_role_;
}
::Xenophobia::RegisterRole* ClientMessage::mutable_reg_role() {
  
  if (reg_role_ == NULL) {
    reg_role_ = new ::Xenophobia::RegisterRole;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ClientMessage.reg_role)
  return reg_role_;
}
::Xenophobia::RegisterRole* ClientMessage::release_reg_role() {
  
  ::Xenophobia::RegisterRole* temp = reg_role_;
  reg_role_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_reg_role(::Xenophobia::RegisterRole* reg_role) {
  delete reg_role_;
  reg_role_ = reg_role;
  if (reg_role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ClientMessage.reg_role)
}

// optional .Xenophobia.DoAction do_action = 4;
bool ClientMessage::has_do_action() const {
  return !_is_default_instance_ && do_action_ != NULL;
}
void ClientMessage::clear_do_action() {
  if (GetArenaNoVirtual() == NULL && do_action_ != NULL) delete do_action_;
  do_action_ = NULL;
}
const ::Xenophobia::DoAction& ClientMessage::do_action() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ClientMessage.do_action)
  return do_action_ != NULL ? *do_action_ : *default_instance_->do_action_;
}
::Xenophobia::DoAction* ClientMessage::mutable_do_action() {
  
  if (do_action_ == NULL) {
    do_action_ = new ::Xenophobia::DoAction;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ClientMessage.do_action)
  return do_action_;
}
::Xenophobia::DoAction* ClientMessage::release_do_action() {
  
  ::Xenophobia::DoAction* temp = do_action_;
  do_action_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_do_action(::Xenophobia::DoAction* do_action) {
  delete do_action_;
  do_action_ = do_action;
  if (do_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ClientMessage.do_action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Xenophobia

// @@protoc_insertion_point(global_scope)
