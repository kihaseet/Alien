// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Xenophobia {

namespace {

const ::google::protobuf::Descriptor* RegisterAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterUpdate_PlayersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Voting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Voting_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndVoting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndVoting_reflection_ = NULL;
const ::google::protobuf::Descriptor* Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvetoryChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvetoryChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InvetoryChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterAnswer_descriptor_ = file->message_type(0);
  static const int RegisterAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAnswer, status_),
  };
  RegisterAnswer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAnswer_descriptor_,
      RegisterAnswer::default_instance_,
      RegisterAnswer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterAnswer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAnswer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAnswer, _is_default_instance_));
  RegisterUpdate_descriptor_ = file->message_type(1);
  static const int RegisterUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUpdate, players_),
  };
  RegisterUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterUpdate_descriptor_,
      RegisterUpdate::default_instance_,
      RegisterUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUpdate, _is_default_instance_));
  RegisterUpdate_PlayersEntry_descriptor_ = RegisterUpdate_descriptor_->nested_type(0);
  PlayerInfo_descriptor_ = file->message_type(2);
  static const int PlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, onduty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, roles_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _is_default_instance_));
  StartGame_descriptor_ = file->message_type(3);
  static const int StartGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGame, players_),
  };
  StartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartGame_descriptor_,
      StartGame::default_instance_,
      StartGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGame, _is_default_instance_));
  TimeSwitch_descriptor_ = file->message_type(4);
  static const int TimeSwitch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSwitch, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSwitch, day_number_),
  };
  TimeSwitch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSwitch_descriptor_,
      TimeSwitch::default_instance_,
      TimeSwitch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeSwitch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSwitch, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSwitch, _is_default_instance_));
  Voting_descriptor_ = file->message_type(5);
  static const int Voting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voting, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voting, targets_),
  };
  Voting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Voting_descriptor_,
      Voting::default_instance_,
      Voting_offsets_,
      -1,
      -1,
      -1,
      sizeof(Voting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voting, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voting, _is_default_instance_));
  EndVoting_descriptor_ = file->message_type(6);
  static const int EndVoting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndVoting, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndVoting, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndVoting, result_),
  };
  EndVoting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EndVoting_descriptor_,
      EndVoting::default_instance_,
      EndVoting_offsets_,
      -1,
      -1,
      -1,
      sizeof(EndVoting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndVoting, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndVoting, _is_default_instance_));
  Change_descriptor_ = file->message_type(7);
  static const int Change_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Change, event_),
  };
  Change_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Change_descriptor_,
      Change::default_instance_,
      Change_offsets_,
      -1,
      -1,
      -1,
      sizeof(Change),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Change, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Change, _is_default_instance_));
  InvetoryChange_descriptor_ = file->message_type(8);
  static const int InvetoryChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvetoryChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvetoryChange, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvetoryChange, charge_),
  };
  InvetoryChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InvetoryChange_descriptor_,
      InvetoryChange::default_instance_,
      InvetoryChange_offsets_,
      -1,
      -1,
      -1,
      sizeof(InvetoryChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvetoryChange, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvetoryChange, _is_default_instance_));
  PlayerChange_descriptor_ = file->message_type(9);
  static const int PlayerChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChange, value_),
  };
  PlayerChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerChange_descriptor_,
      PlayerChange::default_instance_,
      PlayerChange_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChange, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChange, _is_default_instance_));
  ActionRequest_descriptor_ = file->message_type(10);
  static const int ActionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, targets_),
  };
  ActionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRequest_descriptor_,
      ActionRequest::default_instance_,
      ActionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _is_default_instance_));
  ActionResult_descriptor_ = file->message_type(11);
  static const int ActionResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResult, action_),
  };
  ActionResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionResult_descriptor_,
      ActionResult::default_instance_,
      ActionResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResult, _is_default_instance_));
  ServerMessage_descriptor_ = file->message_type(12);
  static const int ServerMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, register_answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, register_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, start_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, time_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, voting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, end_voting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, inventory_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, player_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, action_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, action_result_),
  };
  ServerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _is_default_instance_));
  ServerMessageType_descriptor_ = file->enum_type(0);
  RegisterStatusType_descriptor_ = file->enum_type(1);
  TimeType_descriptor_ = file->enum_type(2);
  InvetoryChangeType_descriptor_ = file->enum_type(3);
  PlayerChangeType_descriptor_ = file->enum_type(4);
  RequestType_descriptor_ = file->enum_type(5);
  ResultType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAnswer_descriptor_, &RegisterAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterUpdate_descriptor_, &RegisterUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RegisterUpdate_PlayersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::types::Role,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                RegisterUpdate_PlayersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartGame_descriptor_, &StartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSwitch_descriptor_, &TimeSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Voting_descriptor_, &Voting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EndVoting_descriptor_, &EndVoting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Change_descriptor_, &Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InvetoryChange_descriptor_, &InvetoryChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerChange_descriptor_, &PlayerChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRequest_descriptor_, &ActionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionResult_descriptor_, &ActionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerMessage_descriptor_, &ServerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  delete RegisterAnswer::default_instance_;
  delete RegisterAnswer_reflection_;
  delete RegisterUpdate::default_instance_;
  delete RegisterUpdate_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete StartGame::default_instance_;
  delete StartGame_reflection_;
  delete TimeSwitch::default_instance_;
  delete TimeSwitch_reflection_;
  delete Voting::default_instance_;
  delete Voting_reflection_;
  delete EndVoting::default_instance_;
  delete EndVoting_reflection_;
  delete Change::default_instance_;
  delete Change_reflection_;
  delete InvetoryChange::default_instance_;
  delete InvetoryChange_reflection_;
  delete PlayerChange::default_instance_;
  delete PlayerChange_reflection_;
  delete ActionRequest::default_instance_;
  delete ActionRequest_reflection_;
  delete ActionResult::default_instance_;
  delete ActionResult_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
}

void protobuf_AddDesc_server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::types::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\nXenophobia\032\013types.proto\""
    "@\n\016RegisterAnswer\022.\n\006status\030\001 \001(\0162\036.Xeno"
    "phobia.RegisterStatusType\"\207\001\n\016RegisterUp"
    "date\0228\n\007players\030\001 \003(\0132\'.Xenophobia.Regis"
    "terUpdate.PlayersEntry\032;\n\014PlayersEntry\022\013"
    "\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0162\013.types.Role:"
    "\0028\001\"\213\001\n\nPlayerInfo\022\014\n\004name\030\001 \001(\t\022#\n\006stat"
    "us\030\002 \001(\0162\023.types.PlayerStatus\022\016\n\006online\030"
    "\003 \001(\010\022\016\n\006onduty\030\004 \001(\010\022\016\n\006avatar\030\005 \001(\005\022\032\n"
    "\005roles\030\006 \003(\0162\013.types.Role\"4\n\tStartGame\022\'"
    "\n\007players\030\001 \003(\0132\026.Xenophobia.PlayerInfo\""
    "D\n\nTimeSwitch\022\"\n\004time\030\001 \001(\0162\024.Xenophobia"
    ".TimeType\022\022\n\nday_number\030\002 \001(\005\"J\n\006Voting\022"
    "\037\n\004type\030\001 \001(\0162\021.types.VotingType\022\037\n\007targ"
    "ets\030\002 \003(\0132\016.types.ITarget\"\\\n\tEndVoting\022\037"
    "\n\004type\030\001 \001(\0162\021.types.VotingType\022\036\n\006targe"
    "t\030\002 \001(\0132\016.types.ITarget\022\016\n\006result\030\003 \001(\t\""
    "%\n\006Change\022\033\n\005event\030\001 \001(\0132\014.types.Event\"i"
    "\n\016InvetoryChange\022,\n\004type\030\001 \001(\0162\036.Xenopho"
    "bia.InvetoryChangeType\022\031\n\004item\030\002 \001(\0162\013.t"
    "ypes.Item\022\016\n\006charge\030\003 \001(\005\"I\n\014PlayerChang"
    "e\022*\n\004type\030\001 \001(\0162\034.Xenophobia.PlayerChang"
    "eType\022\r\n\005value\030\002 \001(\005\"W\n\rActionRequest\022%\n"
    "\004type\030\001 \001(\0162\027.Xenophobia.RequestType\022\037\n\007"
    "targets\030\002 \003(\0132\016.types.ITarget\"S\n\014ActionR"
    "esult\022$\n\004type\030\001 \001(\0162\026.Xenophobia.ResultT"
    "ype\022\035\n\006action\030\002 \001(\0162\r.types.Action\"\274\004\n\rS"
    "erverMessage\022+\n\004type\030\001 \001(\0162\035.Xenophobia."
    "ServerMessageType\0223\n\017register_answer\030\002 \001"
    "(\0132\032.Xenophobia.RegisterAnswer\0223\n\017regist"
    "er_update\030\003 \001(\0132\032.Xenophobia.RegisterUpd"
    "ate\022)\n\nstart_game\030\004 \001(\0132\025.Xenophobia.Sta"
    "rtGame\022+\n\013time_switch\030\005 \001(\0132\026.Xenophobia"
    ".TimeSwitch\022\"\n\006voting\030\006 \001(\0132\022.Xenophobia"
    ".Voting\022)\n\nend_voting\030\007 \001(\0132\025.Xenophobia"
    ".EndVoting\022\"\n\006change\030\010 \001(\0132\022.Xenophobia."
    "Change\0224\n\020inventory_change\030\t \001(\0132\032.Xenop"
    "hobia.InvetoryChange\022/\n\rplayer_change\030\n "
    "\001(\0132\030.Xenophobia.PlayerChange\0221\n\016action_"
    "request\030\013 \001(\0132\031.Xenophobia.ActionRequest"
    "\022/\n\raction_result\030\014 \001(\0132\030.Xenophobia.Act"
    "ionResult*\202\002\n\021ServerMessageType\022\027\n\023SMT_R"
    "EGISTER_ANSWER\020\000\022\027\n\023SMT_REGISTER_UPDATE\020"
    "\001\022\022\n\016SMT_START_GAME\020\002\022\023\n\017SMT_TIME_SWITCH"
    "\020\003\022\016\n\nSMT_VOTING\020\004\022\022\n\016SMT_END_VOTING\020\005\022\016"
    "\n\nSMT_CHANGE\020\006\022\030\n\024SMT_INVENTORY_CHANGE\020\007"
    "\022\025\n\021SMT_PLAYER_CHANGE\020\010\022\026\n\022SMT_ACTION_RE"
    "QUEST\020\t\022\025\n\021SMT_ACTION_RESULT\020\n*`\n\022Regist"
    "erStatusType\022\020\n\014NAME_CORRECT\020\000\022\022\n\016NAME_I"
    "NCORRECT\020\001\022\020\n\014ROLE_CORRECT\020\002\022\022\n\016ROLE_INC"
    "ORRECT\020\003*(\n\010TimeType\022\016\n\nNIGHT_TIME\020\000\022\014\n\010"
    "DAY_TIME\020\001*T\n\022InvetoryChangeType\022\014\n\010ADD_"
    "ITEM\020\000\022\017\n\013CHARGE_ITEM\020\001\022\014\n\010DEL_ITEM\020\002\022\021\n"
    "\rRECHARGE_ITEM\020\003*\?\n\020PlayerChangeType\022\r\n\t"
    "HP_CHANGE\020\000\022\t\n\005ALIEN\020\001\022\021\n\rSTATUS_CHANGE\020"
    "\002*2\n\013RequestType\022\020\n\014HARD_RESOLVE\020\000\022\021\n\rNE"
    "ED_ROTATION\020\001*+\n\nResultType\022\r\n\tUSED_ITEM"
    "\020\000\022\016\n\nUSE_ACTION\020\001P\000b\006proto3", 2308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  RegisterAnswer::default_instance_ = new RegisterAnswer();
  RegisterUpdate::default_instance_ = new RegisterUpdate();
  PlayerInfo::default_instance_ = new PlayerInfo();
  StartGame::default_instance_ = new StartGame();
  TimeSwitch::default_instance_ = new TimeSwitch();
  Voting::default_instance_ = new Voting();
  EndVoting::default_instance_ = new EndVoting();
  Change::default_instance_ = new Change();
  InvetoryChange::default_instance_ = new InvetoryChange();
  PlayerChange::default_instance_ = new PlayerChange();
  ActionRequest::default_instance_ = new ActionRequest();
  ActionResult::default_instance_ = new ActionResult();
  ServerMessage::default_instance_ = new ServerMessage();
  RegisterAnswer::default_instance_->InitAsDefaultInstance();
  RegisterUpdate::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  StartGame::default_instance_->InitAsDefaultInstance();
  TimeSwitch::default_instance_->InitAsDefaultInstance();
  Voting::default_instance_->InitAsDefaultInstance();
  EndVoting::default_instance_->InitAsDefaultInstance();
  Change::default_instance_->InitAsDefaultInstance();
  InvetoryChange::default_instance_->InitAsDefaultInstance();
  PlayerChange::default_instance_->InitAsDefaultInstance();
  ActionRequest::default_instance_->InitAsDefaultInstance();
  ActionResult::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessageType_descriptor_;
}
bool ServerMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegisterStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterStatusType_descriptor_;
}
bool RegisterStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeType_descriptor_;
}
bool TimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InvetoryChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvetoryChangeType_descriptor_;
}
bool InvetoryChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChangeType_descriptor_;
}
bool PlayerChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAnswer::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAnswer::RegisterAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterAnswer)
}

void RegisterAnswer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterAnswer::RegisterAnswer(const RegisterAnswer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterAnswer)
}

void RegisterAnswer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

RegisterAnswer::~RegisterAnswer() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterAnswer)
  SharedDtor();
}

void RegisterAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAnswer_descriptor_;
}

const RegisterAnswer& RegisterAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

RegisterAnswer* RegisterAnswer::default_instance_ = NULL;

RegisterAnswer* RegisterAnswer::New(::google::protobuf::Arena* arena) const {
  RegisterAnswer* n = new RegisterAnswer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAnswer::Clear() {
  status_ = 0;
}

bool RegisterAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.RegisterStatusType status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::Xenophobia::RegisterStatusType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterAnswer)
  return false;
#undef DO_
}

void RegisterAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterAnswer)
  // optional .Xenophobia.RegisterStatusType status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterAnswer)
}

::google::protobuf::uint8* RegisterAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterAnswer)
  // optional .Xenophobia.RegisterStatusType status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterAnswer)
  return target;
}

int RegisterAnswer::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.RegisterStatusType status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAnswer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAnswer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterAnswer::MergeFrom(const RegisterAnswer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RegisterAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAnswer::CopyFrom(const RegisterAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAnswer::IsInitialized() const {

  return true;
}

void RegisterAnswer::Swap(RegisterAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAnswer::InternalSwap(RegisterAnswer* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAnswer_descriptor_;
  metadata.reflection = RegisterAnswer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAnswer

// optional .Xenophobia.RegisterStatusType status = 1;
void RegisterAnswer::clear_status() {
  status_ = 0;
}
 ::Xenophobia::RegisterStatusType RegisterAnswer::status() const {
  // @@protoc_insertion_point(field_get:Xenophobia.RegisterAnswer.status)
  return static_cast< ::Xenophobia::RegisterStatusType >(status_);
}
 void RegisterAnswer::set_status(::Xenophobia::RegisterStatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.RegisterAnswer.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterUpdate::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterUpdate::RegisterUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterUpdate)
}

void RegisterUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterUpdate::RegisterUpdate(const RegisterUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterUpdate)
}

void RegisterUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  players_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  players_.SetEntryDescriptor(
      &::Xenophobia::RegisterUpdate_PlayersEntry_descriptor_);
}

RegisterUpdate::~RegisterUpdate() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterUpdate)
  SharedDtor();
}

void RegisterUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterUpdate_descriptor_;
}

const RegisterUpdate& RegisterUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

RegisterUpdate* RegisterUpdate::default_instance_ = NULL;

RegisterUpdate* RegisterUpdate::New(::google::protobuf::Arena* arena) const {
  RegisterUpdate* n = new RegisterUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterUpdate::Clear() {
  players_.Clear();
}

bool RegisterUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .types.Role> players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          ::google::protobuf::scoped_ptr<RegisterUpdate_PlayersEntry> entry(players_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_players())[entry->key()] =
              static_cast< ::types::Role >(*entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Xenophobia.RegisterUpdate.PlayersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterUpdate)
  return false;
#undef DO_
}

void RegisterUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterUpdate)
  // map<string, .types.Role> players = 1;
  {
    ::google::protobuf::scoped_ptr<RegisterUpdate_PlayersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::types::Role >::const_iterator
        it = this->players().begin();
        it != this->players().end(); ++it) {
      entry.reset(players_.NewEnumEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "Xenophobia.RegisterUpdate.PlayersEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterUpdate)
}

::google::protobuf::uint8* RegisterUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterUpdate)
  // map<string, .types.Role> players = 1;
  {
    ::google::protobuf::scoped_ptr<RegisterUpdate_PlayersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::types::Role >::const_iterator
        it = this->players().begin();
        it != this->players().end(); ++it) {
      entry.reset(players_.NewEnumEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "Xenophobia.RegisterUpdate.PlayersEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterUpdate)
  return target;
}

int RegisterUpdate::ByteSize() const {
  int total_size = 0;

  // map<string, .types.Role> players = 1;
  total_size += 1 * this->players_size();
  {
    ::google::protobuf::scoped_ptr<RegisterUpdate_PlayersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::types::Role >::const_iterator
        it = this->players().begin();
        it != this->players().end(); ++it) {
      entry.reset(players_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterUpdate::MergeFrom(const RegisterUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
}

void RegisterUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterUpdate::CopyFrom(const RegisterUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUpdate::IsInitialized() const {

  return true;
}

void RegisterUpdate::Swap(RegisterUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterUpdate::InternalSwap(RegisterUpdate* other) {
  players_.Swap(&other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterUpdate_descriptor_;
  metadata.reflection = RegisterUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterUpdate

// map<string, .types.Role> players = 1;
int RegisterUpdate::players_size() const {
  return players_.size();
}
void RegisterUpdate::clear_players() {
  players_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::types::Role >&
RegisterUpdate::players() const {
  // @@protoc_insertion_point(field_map:Xenophobia.RegisterUpdate.players)
  return players_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::types::Role >*
RegisterUpdate::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:Xenophobia.RegisterUpdate.players)
  return players_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kStatusFieldNumber;
const int PlayerInfo::kOnlineFieldNumber;
const int PlayerInfo::kOndutyFieldNumber;
const int PlayerInfo::kAvatarFieldNumber;
const int PlayerInfo::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  online_ = false;
  onduty_ = false;
  avatar_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Xenophobia.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, onduty_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = 0;

#undef ZR_HELPER_
#undef ZR_

  roles_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Xenophobia.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .types.PlayerStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::types::PlayerStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (tag == 24) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_onduty;
        break;
      }

      // optional bool onduty = 4;
      case 4: {
        if (tag == 32) {
         parse_onduty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onduty_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avatar;
        break;
      }

      // optional int32 avatar = 5;
      case 5: {
        if (tag == 40) {
         parse_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_roles;
        break;
      }

      // repeated .types.Role roles = 6;
      case 6: {
        if (tag == 50) {
         parse_roles:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_roles(static_cast< ::types::Role >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 48) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_roles(static_cast< ::types::Role >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.PlayerInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .types.PlayerStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional bool online = 3;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // optional bool onduty = 4;
  if (this->onduty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->onduty(), output);
  }

  // optional int32 avatar = 5;
  if (this->avatar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->avatar(), output);
  }

  // repeated .types.Role roles = 6;
  if (this->roles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_roles_cached_byte_size_);
  }
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->roles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.PlayerInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .types.PlayerStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional bool online = 3;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  // optional bool onduty = 4;
  if (this->onduty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->onduty(), target);
  }

  // optional int32 avatar = 5;
  if (this->avatar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->avatar(), target);
  }

  // repeated .types.Role roles = 6;
  if (this->roles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _roles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->roles(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .types.PlayerStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional bool online = 3;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool onduty = 4;
  if (this->onduty() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 avatar = 5;
  if (this->avatar() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatar());
  }

  // repeated .types.Role roles = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->roles(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _roles_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  roles_.MergeFrom(from.roles_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
  if (from.onduty() != 0) {
    set_onduty(from.onduty());
  }
  if (from.avatar() != 0) {
    set_avatar(from.avatar());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  name_.Swap(&other->name_);
  std::swap(status_, other->status_);
  std::swap(online_, other->online_);
  std::swap(onduty_, other->onduty_);
  std::swap(avatar_, other->avatar_);
  roles_.UnsafeArenaSwap(&other->roles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional string name = 1;
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xenophobia.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xenophobia.PlayerInfo.name)
}
 ::std::string* PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Xenophobia.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.PlayerInfo.name)
}

// optional .types.PlayerStatus status = 2;
void PlayerInfo::clear_status() {
  status_ = 0;
}
 ::types::PlayerStatus PlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.status)
  return static_cast< ::types::PlayerStatus >(status_);
}
 void PlayerInfo::set_status(::types::PlayerStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.status)
}

// optional bool online = 3;
void PlayerInfo::clear_online() {
  online_ = false;
}
 bool PlayerInfo::online() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.online)
  return online_;
}
 void PlayerInfo::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.online)
}

// optional bool onduty = 4;
void PlayerInfo::clear_onduty() {
  onduty_ = false;
}
 bool PlayerInfo::onduty() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.onduty)
  return onduty_;
}
 void PlayerInfo::set_onduty(bool value) {
  
  onduty_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.onduty)
}

// optional int32 avatar = 5;
void PlayerInfo::clear_avatar() {
  avatar_ = 0;
}
 ::google::protobuf::int32 PlayerInfo::avatar() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.avatar)
  return avatar_;
}
 void PlayerInfo::set_avatar(::google::protobuf::int32 value) {
  
  avatar_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.avatar)
}

// repeated .types.Role roles = 6;
int PlayerInfo::roles_size() const {
  return roles_.size();
}
void PlayerInfo::clear_roles() {
  roles_.Clear();
}
 ::types::Role PlayerInfo::roles(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerInfo.roles)
  return static_cast< ::types::Role >(roles_.Get(index));
}
 void PlayerInfo::set_roles(int index, ::types::Role value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerInfo.roles)
}
 void PlayerInfo::add_roles(::types::Role value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:Xenophobia.PlayerInfo.roles)
}
 const ::google::protobuf::RepeatedField<int>&
PlayerInfo::roles() const {
  // @@protoc_insertion_point(field_list:Xenophobia.PlayerInfo.roles)
  return roles_;
}
 ::google::protobuf::RepeatedField<int>*
PlayerInfo::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.PlayerInfo.roles)
  return &roles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartGame::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartGame::StartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.StartGame)
}

void StartGame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartGame::StartGame(const StartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.StartGame)
}

void StartGame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StartGame::~StartGame() {
  // @@protoc_insertion_point(destructor:Xenophobia.StartGame)
  SharedDtor();
}

void StartGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartGame_descriptor_;
}

const StartGame& StartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

StartGame* StartGame::default_instance_ = NULL;

StartGame* StartGame::New(::google::protobuf::Arena* arena) const {
  StartGame* n = new StartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartGame::Clear() {
  players_.Clear();
}

bool StartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.StartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Xenophobia.PlayerInfo players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.StartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.StartGame)
  return false;
#undef DO_
}

void StartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.StartGame)
  // repeated .Xenophobia.PlayerInfo players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.StartGame)
}

::google::protobuf::uint8* StartGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.StartGame)
  // repeated .Xenophobia.PlayerInfo players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.StartGame)
  return target;
}

int StartGame::ByteSize() const {
  int total_size = 0;

  // repeated .Xenophobia.PlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartGame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartGame>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartGame::MergeFrom(const StartGame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
}

void StartGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGame::CopyFrom(const StartGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGame::IsInitialized() const {

  return true;
}

void StartGame::Swap(StartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartGame::InternalSwap(StartGame* other) {
  players_.UnsafeArenaSwap(&other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartGame_descriptor_;
  metadata.reflection = StartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartGame

// repeated .Xenophobia.PlayerInfo players = 1;
int StartGame::players_size() const {
  return players_.size();
}
void StartGame::clear_players() {
  players_.Clear();
}
const ::Xenophobia::PlayerInfo& StartGame::players(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.StartGame.players)
  return players_.Get(index);
}
::Xenophobia::PlayerInfo* StartGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Xenophobia.StartGame.players)
  return players_.Mutable(index);
}
::Xenophobia::PlayerInfo* StartGame::add_players() {
  // @@protoc_insertion_point(field_add:Xenophobia.StartGame.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::Xenophobia::PlayerInfo >*
StartGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.StartGame.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::Xenophobia::PlayerInfo >&
StartGame::players() const {
  // @@protoc_insertion_point(field_list:Xenophobia.StartGame.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSwitch::kTimeFieldNumber;
const int TimeSwitch::kDayNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSwitch::TimeSwitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.TimeSwitch)
}

void TimeSwitch::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeSwitch::TimeSwitch(const TimeSwitch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.TimeSwitch)
}

void TimeSwitch::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0;
  day_number_ = 0;
}

TimeSwitch::~TimeSwitch() {
  // @@protoc_insertion_point(destructor:Xenophobia.TimeSwitch)
  SharedDtor();
}

void TimeSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSwitch_descriptor_;
}

const TimeSwitch& TimeSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

TimeSwitch* TimeSwitch::default_instance_ = NULL;

TimeSwitch* TimeSwitch::New(::google::protobuf::Arena* arena) const {
  TimeSwitch* n = new TimeSwitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSwitch::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeSwitch*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, day_number_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.TimeSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.TimeType time = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_time(static_cast< ::Xenophobia::TimeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_number;
        break;
      }

      // optional int32 day_number = 2;
      case 2: {
        if (tag == 16) {
         parse_day_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.TimeSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.TimeSwitch)
  return false;
#undef DO_
}

void TimeSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.TimeSwitch)
  // optional .Xenophobia.TimeType time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->time(), output);
  }

  // optional int32 day_number = 2;
  if (this->day_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.TimeSwitch)
}

::google::protobuf::uint8* TimeSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.TimeSwitch)
  // optional .Xenophobia.TimeType time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->time(), target);
  }

  // optional int32 day_number = 2;
  if (this->day_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.TimeSwitch)
  return target;
}

int TimeSwitch::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.TimeType time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->time());
  }

  // optional int32 day_number = 2;
  if (this->day_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeSwitch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSwitch>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSwitch::MergeFrom(const TimeSwitch& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.day_number() != 0) {
    set_day_number(from.day_number());
  }
}

void TimeSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSwitch::CopyFrom(const TimeSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSwitch::IsInitialized() const {

  return true;
}

void TimeSwitch::Swap(TimeSwitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSwitch::InternalSwap(TimeSwitch* other) {
  std::swap(time_, other->time_);
  std::swap(day_number_, other->day_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSwitch_descriptor_;
  metadata.reflection = TimeSwitch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSwitch

// optional .Xenophobia.TimeType time = 1;
void TimeSwitch::clear_time() {
  time_ = 0;
}
 ::Xenophobia::TimeType TimeSwitch::time() const {
  // @@protoc_insertion_point(field_get:Xenophobia.TimeSwitch.time)
  return static_cast< ::Xenophobia::TimeType >(time_);
}
 void TimeSwitch::set_time(::Xenophobia::TimeType value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.TimeSwitch.time)
}

// optional int32 day_number = 2;
void TimeSwitch::clear_day_number() {
  day_number_ = 0;
}
 ::google::protobuf::int32 TimeSwitch::day_number() const {
  // @@protoc_insertion_point(field_get:Xenophobia.TimeSwitch.day_number)
  return day_number_;
}
 void TimeSwitch::set_day_number(::google::protobuf::int32 value) {
  
  day_number_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.TimeSwitch.day_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Voting::kTypeFieldNumber;
const int Voting::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Voting::Voting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.Voting)
}

void Voting::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Voting::Voting(const Voting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.Voting)
}

void Voting::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

Voting::~Voting() {
  // @@protoc_insertion_point(destructor:Xenophobia.Voting)
  SharedDtor();
}

void Voting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Voting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Voting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Voting_descriptor_;
}

const Voting& Voting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Voting* Voting::default_instance_ = NULL;

Voting* Voting::New(::google::protobuf::Arena* arena) const {
  Voting* n = new Voting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Voting::Clear() {
  type_ = 0;
  targets_.Clear();
}

bool Voting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.Voting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.VotingType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::types::VotingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        break;
      }

      // repeated .types.ITarget targets = 2;
      case 2: {
        if (tag == 18) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.Voting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.Voting)
  return false;
#undef DO_
}

void Voting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.Voting)
  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .types.ITarget targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.Voting)
}

::google::protobuf::uint8* Voting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.Voting)
  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .types.ITarget targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.Voting)
  return target;
}

int Voting::ByteSize() const {
  int total_size = 0;

  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .types.ITarget targets = 2;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Voting::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Voting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Voting>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Voting::MergeFrom(const Voting& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targets_.MergeFrom(from.targets_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Voting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voting::CopyFrom(const Voting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voting::IsInitialized() const {

  return true;
}

void Voting::Swap(Voting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Voting::InternalSwap(Voting* other) {
  std::swap(type_, other->type_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Voting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Voting_descriptor_;
  metadata.reflection = Voting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Voting

// optional .types.VotingType type = 1;
void Voting::clear_type() {
  type_ = 0;
}
 ::types::VotingType Voting::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.Voting.type)
  return static_cast< ::types::VotingType >(type_);
}
 void Voting::set_type(::types::VotingType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.Voting.type)
}

// repeated .types.ITarget targets = 2;
int Voting::targets_size() const {
  return targets_.size();
}
void Voting::clear_targets() {
  targets_.Clear();
}
const ::types::ITarget& Voting::targets(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.Voting.targets)
  return targets_.Get(index);
}
::types::ITarget* Voting::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:Xenophobia.Voting.targets)
  return targets_.Mutable(index);
}
::types::ITarget* Voting::add_targets() {
  // @@protoc_insertion_point(field_add:Xenophobia.Voting.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::types::ITarget >*
Voting::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.Voting.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::types::ITarget >&
Voting::targets() const {
  // @@protoc_insertion_point(field_list:Xenophobia.Voting.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndVoting::kTypeFieldNumber;
const int EndVoting::kTargetFieldNumber;
const int EndVoting::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndVoting::EndVoting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.EndVoting)
}

void EndVoting::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_ = const_cast< ::types::ITarget*>(&::types::ITarget::default_instance());
}

EndVoting::EndVoting(const EndVoting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.EndVoting)
}

void EndVoting::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  target_ = NULL;
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EndVoting::~EndVoting() {
  // @@protoc_insertion_point(destructor:Xenophobia.EndVoting)
  SharedDtor();
}

void EndVoting::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete target_;
  }
}

void EndVoting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndVoting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndVoting_descriptor_;
}

const EndVoting& EndVoting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

EndVoting* EndVoting::default_instance_ = NULL;

EndVoting* EndVoting::New(::google::protobuf::Arena* arena) const {
  EndVoting* n = new EndVoting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndVoting::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EndVoting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.EndVoting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.VotingType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::types::VotingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional .types.ITarget target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional string result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Xenophobia.EndVoting.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.EndVoting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.EndVoting)
  return false;
#undef DO_
}

void EndVoting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.EndVoting)
  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .types.ITarget target = 2;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_, output);
  }

  // optional string result = 3;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.EndVoting.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.EndVoting)
}

::google::protobuf::uint8* EndVoting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.EndVoting)
  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .types.ITarget target = 2;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->target_, target);
  }

  // optional string result = 3;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.EndVoting.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.EndVoting)
  return target;
}

int EndVoting::ByteSize() const {
  int total_size = 0;

  // optional .types.VotingType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .types.ITarget target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  // optional string result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndVoting::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EndVoting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EndVoting>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndVoting::MergeFrom(const EndVoting& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_target()) {
    mutable_target()->::types::ITarget::MergeFrom(from.target());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void EndVoting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndVoting::CopyFrom(const EndVoting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndVoting::IsInitialized() const {

  return true;
}

void EndVoting::Swap(EndVoting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndVoting::InternalSwap(EndVoting* other) {
  std::swap(type_, other->type_);
  std::swap(target_, other->target_);
  result_.Swap(&other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndVoting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndVoting_descriptor_;
  metadata.reflection = EndVoting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndVoting

// optional .types.VotingType type = 1;
void EndVoting::clear_type() {
  type_ = 0;
}
 ::types::VotingType EndVoting::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.EndVoting.type)
  return static_cast< ::types::VotingType >(type_);
}
 void EndVoting::set_type(::types::VotingType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.EndVoting.type)
}

// optional .types.ITarget target = 2;
bool EndVoting::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
void EndVoting::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::types::ITarget& EndVoting::target() const {
  // @@protoc_insertion_point(field_get:Xenophobia.EndVoting.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
::types::ITarget* EndVoting::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::types::ITarget;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.EndVoting.target)
  return target_;
}
::types::ITarget* EndVoting::release_target() {
  
  ::types::ITarget* temp = target_;
  target_ = NULL;
  return temp;
}
void EndVoting::set_allocated_target(::types::ITarget* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.EndVoting.target)
}

// optional string result = 3;
void EndVoting::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EndVoting::result() const {
  // @@protoc_insertion_point(field_get:Xenophobia.EndVoting.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EndVoting::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Xenophobia.EndVoting.result)
}
 void EndVoting::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xenophobia.EndVoting.result)
}
 void EndVoting::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xenophobia.EndVoting.result)
}
 ::std::string* EndVoting::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:Xenophobia.EndVoting.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EndVoting::release_result() {
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EndVoting::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.EndVoting.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change::Change()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.Change)
}

void Change::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  event_ = const_cast< ::types::Event*>(&::types::Event::default_instance());
}

Change::Change(const Change& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.Change)
}

void Change::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  event_ = NULL;
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:Xenophobia.Change)
  SharedDtor();
}

void Change::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Change_descriptor_;
}

const Change& Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Change* Change::default_instance_ = NULL;

Change* Change::New(::google::protobuf::Arena* arena) const {
  Change* n = new Change;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Change::Clear() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) delete event_;
  event_ = NULL;
}

bool Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.Change)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Event event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.Change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.Change)
  return false;
#undef DO_
}

void Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.Change)
  // optional .types.Event event = 1;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->event_, output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.Change)
}

::google::protobuf::uint8* Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.Change)
  // optional .types.Event event = 1;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->event_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.Change)
  return target;
}

int Change::ByteSize() const {
  int total_size = 0;

  // optional .types.Event event = 1;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Change::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Change* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Change>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Change::MergeFrom(const Change& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_event()) {
    mutable_event()->::types::Event::MergeFrom(from.event());
  }
}

void Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change::CopyFrom(const Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {

  return true;
}

void Change::Swap(Change* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change::InternalSwap(Change* other) {
  std::swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Change_descriptor_;
  metadata.reflection = Change_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Change

// optional .types.Event event = 1;
bool Change::has_event() const {
  return !_is_default_instance_ && event_ != NULL;
}
void Change::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) delete event_;
  event_ = NULL;
}
const ::types::Event& Change::event() const {
  // @@protoc_insertion_point(field_get:Xenophobia.Change.event)
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
::types::Event* Change::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::types::Event;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.Change.event)
  return event_;
}
::types::Event* Change::release_event() {
  
  ::types::Event* temp = event_;
  event_ = NULL;
  return temp;
}
void Change::set_allocated_event(::types::Event* event) {
  delete event_;
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.Change.event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvetoryChange::kTypeFieldNumber;
const int InvetoryChange::kItemFieldNumber;
const int InvetoryChange::kChargeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvetoryChange::InvetoryChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.InvetoryChange)
}

void InvetoryChange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InvetoryChange::InvetoryChange(const InvetoryChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.InvetoryChange)
}

void InvetoryChange::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  item_ = 0;
  charge_ = 0;
}

InvetoryChange::~InvetoryChange() {
  // @@protoc_insertion_point(destructor:Xenophobia.InvetoryChange)
  SharedDtor();
}

void InvetoryChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvetoryChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvetoryChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvetoryChange_descriptor_;
}

const InvetoryChange& InvetoryChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

InvetoryChange* InvetoryChange::default_instance_ = NULL;

InvetoryChange* InvetoryChange::New(::google::protobuf::Arena* arena) const {
  InvetoryChange* n = new InvetoryChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvetoryChange::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InvetoryChange*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, charge_);

#undef ZR_HELPER_
#undef ZR_

}

bool InvetoryChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.InvetoryChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.InvetoryChangeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::InvetoryChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional .types.Item item = 2;
      case 2: {
        if (tag == 16) {
         parse_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item(static_cast< ::types::Item >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charge;
        break;
      }

      // optional int32 charge = 3;
      case 3: {
        if (tag == 24) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.InvetoryChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.InvetoryChange)
  return false;
#undef DO_
}

void InvetoryChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.InvetoryChange)
  // optional .Xenophobia.InvetoryChangeType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->item(), output);
  }

  // optional int32 charge = 3;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->charge(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.InvetoryChange)
}

::google::protobuf::uint8* InvetoryChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.InvetoryChange)
  // optional .Xenophobia.InvetoryChangeType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->item(), target);
  }

  // optional int32 charge = 3;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->charge(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.InvetoryChange)
  return target;
}

int InvetoryChange::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.InvetoryChangeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item());
  }

  // optional int32 charge = 3;
  if (this->charge() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->charge());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvetoryChange::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InvetoryChange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InvetoryChange>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvetoryChange::MergeFrom(const InvetoryChange& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
}

void InvetoryChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvetoryChange::CopyFrom(const InvetoryChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvetoryChange::IsInitialized() const {

  return true;
}

void InvetoryChange::Swap(InvetoryChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvetoryChange::InternalSwap(InvetoryChange* other) {
  std::swap(type_, other->type_);
  std::swap(item_, other->item_);
  std::swap(charge_, other->charge_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvetoryChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvetoryChange_descriptor_;
  metadata.reflection = InvetoryChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvetoryChange

// optional .Xenophobia.InvetoryChangeType type = 1;
void InvetoryChange::clear_type() {
  type_ = 0;
}
 ::Xenophobia::InvetoryChangeType InvetoryChange::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.InvetoryChange.type)
  return static_cast< ::Xenophobia::InvetoryChangeType >(type_);
}
 void InvetoryChange::set_type(::Xenophobia::InvetoryChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.InvetoryChange.type)
}

// optional .types.Item item = 2;
void InvetoryChange::clear_item() {
  item_ = 0;
}
 ::types::Item InvetoryChange::item() const {
  // @@protoc_insertion_point(field_get:Xenophobia.InvetoryChange.item)
  return static_cast< ::types::Item >(item_);
}
 void InvetoryChange::set_item(::types::Item value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.InvetoryChange.item)
}

// optional int32 charge = 3;
void InvetoryChange::clear_charge() {
  charge_ = 0;
}
 ::google::protobuf::int32 InvetoryChange::charge() const {
  // @@protoc_insertion_point(field_get:Xenophobia.InvetoryChange.charge)
  return charge_;
}
 void InvetoryChange::set_charge(::google::protobuf::int32 value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.InvetoryChange.charge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerChange::kTypeFieldNumber;
const int PlayerChange::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChange::PlayerChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.PlayerChange)
}

void PlayerChange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerChange::PlayerChange(const PlayerChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.PlayerChange)
}

void PlayerChange::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
}

PlayerChange::~PlayerChange() {
  // @@protoc_insertion_point(destructor:Xenophobia.PlayerChange)
  SharedDtor();
}

void PlayerChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChange_descriptor_;
}

const PlayerChange& PlayerChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

PlayerChange* PlayerChange::default_instance_ = NULL;

PlayerChange* PlayerChange::New(::google::protobuf::Arena* arena) const {
  PlayerChange* n = new PlayerChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerChange::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerChange*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.PlayerChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.PlayerChangeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::PlayerChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.PlayerChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.PlayerChange)
  return false;
#undef DO_
}

void PlayerChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.PlayerChange)
  // optional .Xenophobia.PlayerChangeType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.PlayerChange)
}

::google::protobuf::uint8* PlayerChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.PlayerChange)
  // optional .Xenophobia.PlayerChangeType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.PlayerChange)
  return target;
}

int PlayerChange::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.PlayerChangeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerChange::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerChange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerChange>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerChange::MergeFrom(const PlayerChange& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void PlayerChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChange::CopyFrom(const PlayerChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChange::IsInitialized() const {

  return true;
}

void PlayerChange::Swap(PlayerChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChange::InternalSwap(PlayerChange* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerChange_descriptor_;
  metadata.reflection = PlayerChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerChange

// optional .Xenophobia.PlayerChangeType type = 1;
void PlayerChange::clear_type() {
  type_ = 0;
}
 ::Xenophobia::PlayerChangeType PlayerChange::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerChange.type)
  return static_cast< ::Xenophobia::PlayerChangeType >(type_);
}
 void PlayerChange::set_type(::Xenophobia::PlayerChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerChange.type)
}

// optional int32 value = 2;
void PlayerChange::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 PlayerChange::value() const {
  // @@protoc_insertion_point(field_get:Xenophobia.PlayerChange.value)
  return value_;
}
 void PlayerChange::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.PlayerChange.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRequest::kTypeFieldNumber;
const int ActionRequest::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRequest::ActionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.ActionRequest)
}

void ActionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActionRequest::ActionRequest(const ActionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.ActionRequest)
}

void ActionRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

ActionRequest::~ActionRequest() {
  // @@protoc_insertion_point(destructor:Xenophobia.ActionRequest)
  SharedDtor();
}

void ActionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRequest_descriptor_;
}

const ActionRequest& ActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ActionRequest* ActionRequest::default_instance_ = NULL;

ActionRequest* ActionRequest::New(::google::protobuf::Arena* arena) const {
  ActionRequest* n = new ActionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRequest::Clear() {
  type_ = 0;
  targets_.Clear();
}

bool ActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.ActionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        break;
      }

      // repeated .types.ITarget targets = 2;
      case 2: {
        if (tag == 18) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.ActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.ActionRequest)
  return false;
#undef DO_
}

void ActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.ActionRequest)
  // optional .Xenophobia.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .types.ITarget targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.ActionRequest)
}

::google::protobuf::uint8* ActionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.ActionRequest)
  // optional .Xenophobia.RequestType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .types.ITarget targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.ActionRequest)
  return target;
}

int ActionRequest::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .types.ITarget targets = 2;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRequest::MergeFrom(const ActionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targets_.MergeFrom(from.targets_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRequest::CopyFrom(const ActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRequest::IsInitialized() const {

  return true;
}

void ActionRequest::Swap(ActionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRequest::InternalSwap(ActionRequest* other) {
  std::swap(type_, other->type_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRequest_descriptor_;
  metadata.reflection = ActionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRequest

// optional .Xenophobia.RequestType type = 1;
void ActionRequest::clear_type() {
  type_ = 0;
}
 ::Xenophobia::RequestType ActionRequest::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ActionRequest.type)
  return static_cast< ::Xenophobia::RequestType >(type_);
}
 void ActionRequest::set_type(::Xenophobia::RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.ActionRequest.type)
}

// repeated .types.ITarget targets = 2;
int ActionRequest::targets_size() const {
  return targets_.size();
}
void ActionRequest::clear_targets() {
  targets_.Clear();
}
const ::types::ITarget& ActionRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.ActionRequest.targets)
  return targets_.Get(index);
}
::types::ITarget* ActionRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:Xenophobia.ActionRequest.targets)
  return targets_.Mutable(index);
}
::types::ITarget* ActionRequest::add_targets() {
  // @@protoc_insertion_point(field_add:Xenophobia.ActionRequest.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::types::ITarget >*
ActionRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.ActionRequest.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::types::ITarget >&
ActionRequest::targets() const {
  // @@protoc_insertion_point(field_list:Xenophobia.ActionRequest.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionResult::kTypeFieldNumber;
const int ActionResult::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionResult::ActionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.ActionResult)
}

void ActionResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActionResult::ActionResult(const ActionResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.ActionResult)
}

void ActionResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  action_ = 0;
}

ActionResult::~ActionResult() {
  // @@protoc_insertion_point(destructor:Xenophobia.ActionResult)
  SharedDtor();
}

void ActionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionResult_descriptor_;
}

const ActionResult& ActionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ActionResult* ActionResult::default_instance_ = NULL;

ActionResult* ActionResult::New(::google::protobuf::Arena* arena) const {
  ActionResult* n = new ActionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, action_);

#undef ZR_HELPER_
#undef ZR_

}

bool ActionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.ActionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.ResultType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .types.Action action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::types::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.ActionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.ActionResult)
  return false;
#undef DO_
}

void ActionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.ActionResult)
  // optional .Xenophobia.ResultType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .types.Action action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.ActionResult)
}

::google::protobuf::uint8* ActionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.ActionResult)
  // optional .Xenophobia.ResultType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .types.Action action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.ActionResult)
  return target;
}

int ActionResult::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.ResultType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .types.Action action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActionResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionResult::MergeFrom(const ActionResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void ActionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionResult::CopyFrom(const ActionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionResult::IsInitialized() const {

  return true;
}

void ActionResult::Swap(ActionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionResult::InternalSwap(ActionResult* other) {
  std::swap(type_, other->type_);
  std::swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionResult_descriptor_;
  metadata.reflection = ActionResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionResult

// optional .Xenophobia.ResultType type = 1;
void ActionResult::clear_type() {
  type_ = 0;
}
 ::Xenophobia::ResultType ActionResult::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ActionResult.type)
  return static_cast< ::Xenophobia::ResultType >(type_);
}
 void ActionResult::set_type(::Xenophobia::ResultType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.ActionResult.type)
}

// optional .types.Action action = 2;
void ActionResult::clear_action() {
  action_ = 0;
}
 ::types::Action ActionResult::action() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ActionResult.action)
  return static_cast< ::types::Action >(action_);
}
 void ActionResult::set_action(::types::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.ActionResult.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kTypeFieldNumber;
const int ServerMessage::kRegisterAnswerFieldNumber;
const int ServerMessage::kRegisterUpdateFieldNumber;
const int ServerMessage::kStartGameFieldNumber;
const int ServerMessage::kTimeSwitchFieldNumber;
const int ServerMessage::kVotingFieldNumber;
const int ServerMessage::kEndVotingFieldNumber;
const int ServerMessage::kChangeFieldNumber;
const int ServerMessage::kInventoryChangeFieldNumber;
const int ServerMessage::kPlayerChangeFieldNumber;
const int ServerMessage::kActionRequestFieldNumber;
const int ServerMessage::kActionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  register_answer_ = const_cast< ::Xenophobia::RegisterAnswer*>(&::Xenophobia::RegisterAnswer::default_instance());
  register_update_ = const_cast< ::Xenophobia::RegisterUpdate*>(&::Xenophobia::RegisterUpdate::default_instance());
  start_game_ = const_cast< ::Xenophobia::StartGame*>(&::Xenophobia::StartGame::default_instance());
  time_switch_ = const_cast< ::Xenophobia::TimeSwitch*>(&::Xenophobia::TimeSwitch::default_instance());
  voting_ = const_cast< ::Xenophobia::Voting*>(&::Xenophobia::Voting::default_instance());
  end_voting_ = const_cast< ::Xenophobia::EndVoting*>(&::Xenophobia::EndVoting::default_instance());
  change_ = const_cast< ::Xenophobia::Change*>(&::Xenophobia::Change::default_instance());
  inventory_change_ = const_cast< ::Xenophobia::InvetoryChange*>(&::Xenophobia::InvetoryChange::default_instance());
  player_change_ = const_cast< ::Xenophobia::PlayerChange*>(&::Xenophobia::PlayerChange::default_instance());
  action_request_ = const_cast< ::Xenophobia::ActionRequest*>(&::Xenophobia::ActionRequest::default_instance());
  action_result_ = const_cast< ::Xenophobia::ActionResult*>(&::Xenophobia::ActionResult::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.ServerMessage)
}

void ServerMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  register_answer_ = NULL;
  register_update_ = NULL;
  start_game_ = NULL;
  time_switch_ = NULL;
  voting_ = NULL;
  end_voting_ = NULL;
  change_ = NULL;
  inventory_change_ = NULL;
  player_change_ = NULL;
  action_request_ = NULL;
  action_result_ = NULL;
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:Xenophobia.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete register_answer_;
    delete register_update_;
    delete start_game_;
    delete time_switch_;
    delete voting_;
    delete end_voting_;
    delete change_;
    delete inventory_change_;
    delete player_change_;
    delete action_request_;
    delete action_result_;
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New(::google::protobuf::Arena* arena) const {
  ServerMessage* n = new ServerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMessage::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && register_answer_ != NULL) delete register_answer_;
  register_answer_ = NULL;
  if (GetArenaNoVirtual() == NULL && register_update_ != NULL) delete register_update_;
  register_update_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_game_ != NULL) delete start_game_;
  start_game_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_switch_ != NULL) delete time_switch_;
  time_switch_ = NULL;
  if (GetArenaNoVirtual() == NULL && voting_ != NULL) delete voting_;
  voting_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_voting_ != NULL) delete end_voting_;
  end_voting_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_ != NULL) delete change_;
  change_ = NULL;
  if (GetArenaNoVirtual() == NULL && inventory_change_ != NULL) delete inventory_change_;
  inventory_change_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_change_ != NULL) delete player_change_;
  player_change_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_request_ != NULL) delete action_request_;
  action_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_result_ != NULL) delete action_result_;
  action_result_ = NULL;
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Xenophobia.ServerMessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Xenophobia::ServerMessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_register_answer;
        break;
      }

      // optional .Xenophobia.RegisterAnswer register_answer = 2;
      case 2: {
        if (tag == 18) {
         parse_register_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_answer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_register_update;
        break;
      }

      // optional .Xenophobia.RegisterUpdate register_update = 3;
      case 3: {
        if (tag == 26) {
         parse_register_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_game;
        break;
      }

      // optional .Xenophobia.StartGame start_game = 4;
      case 4: {
        if (tag == 34) {
         parse_start_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_time_switch;
        break;
      }

      // optional .Xenophobia.TimeSwitch time_switch = 5;
      case 5: {
        if (tag == 42) {
         parse_time_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_switch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voting;
        break;
      }

      // optional .Xenophobia.Voting voting = 6;
      case 6: {
        if (tag == 50) {
         parse_voting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_voting;
        break;
      }

      // optional .Xenophobia.EndVoting end_voting = 7;
      case 7: {
        if (tag == 58) {
         parse_end_voting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_voting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_change;
        break;
      }

      // optional .Xenophobia.Change change = 8;
      case 8: {
        if (tag == 66) {
         parse_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_inventory_change;
        break;
      }

      // optional .Xenophobia.InvetoryChange inventory_change = 9;
      case 9: {
        if (tag == 74) {
         parse_inventory_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_player_change;
        break;
      }

      // optional .Xenophobia.PlayerChange player_change = 10;
      case 10: {
        if (tag == 82) {
         parse_player_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_action_request;
        break;
      }

      // optional .Xenophobia.ActionRequest action_request = 11;
      case 11: {
        if (tag == 90) {
         parse_action_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_action_result;
        break;
      }

      // optional .Xenophobia.ActionResult action_result = 12;
      case 12: {
        if (tag == 98) {
         parse_action_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.ServerMessage)
  // optional .Xenophobia.ServerMessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Xenophobia.RegisterAnswer register_answer = 2;
  if (this->has_register_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->register_answer_, output);
  }

  // optional .Xenophobia.RegisterUpdate register_update = 3;
  if (this->has_register_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->register_update_, output);
  }

  // optional .Xenophobia.StartGame start_game = 4;
  if (this->has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_game_, output);
  }

  // optional .Xenophobia.TimeSwitch time_switch = 5;
  if (this->has_time_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->time_switch_, output);
  }

  // optional .Xenophobia.Voting voting = 6;
  if (this->has_voting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->voting_, output);
  }

  // optional .Xenophobia.EndVoting end_voting = 7;
  if (this->has_end_voting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->end_voting_, output);
  }

  // optional .Xenophobia.Change change = 8;
  if (this->has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->change_, output);
  }

  // optional .Xenophobia.InvetoryChange inventory_change = 9;
  if (this->has_inventory_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->inventory_change_, output);
  }

  // optional .Xenophobia.PlayerChange player_change = 10;
  if (this->has_player_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->player_change_, output);
  }

  // optional .Xenophobia.ActionRequest action_request = 11;
  if (this->has_action_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->action_request_, output);
  }

  // optional .Xenophobia.ActionResult action_result = 12;
  if (this->has_action_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->action_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.ServerMessage)
  // optional .Xenophobia.ServerMessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Xenophobia.RegisterAnswer register_answer = 2;
  if (this->has_register_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->register_answer_, target);
  }

  // optional .Xenophobia.RegisterUpdate register_update = 3;
  if (this->has_register_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->register_update_, target);
  }

  // optional .Xenophobia.StartGame start_game = 4;
  if (this->has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->start_game_, target);
  }

  // optional .Xenophobia.TimeSwitch time_switch = 5;
  if (this->has_time_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->time_switch_, target);
  }

  // optional .Xenophobia.Voting voting = 6;
  if (this->has_voting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->voting_, target);
  }

  // optional .Xenophobia.EndVoting end_voting = 7;
  if (this->has_end_voting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->end_voting_, target);
  }

  // optional .Xenophobia.Change change = 8;
  if (this->has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->change_, target);
  }

  // optional .Xenophobia.InvetoryChange inventory_change = 9;
  if (this->has_inventory_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->inventory_change_, target);
  }

  // optional .Xenophobia.PlayerChange player_change = 10;
  if (this->has_player_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->player_change_, target);
  }

  // optional .Xenophobia.ActionRequest action_request = 11;
  if (this->has_action_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->action_request_, target);
  }

  // optional .Xenophobia.ActionResult action_result = 12;
  if (this->has_action_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->action_result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.ServerMessage)
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  // optional .Xenophobia.ServerMessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .Xenophobia.RegisterAnswer register_answer = 2;
  if (this->has_register_answer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->register_answer_);
  }

  // optional .Xenophobia.RegisterUpdate register_update = 3;
  if (this->has_register_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->register_update_);
  }

  // optional .Xenophobia.StartGame start_game = 4;
  if (this->has_start_game()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_game_);
  }

  // optional .Xenophobia.TimeSwitch time_switch = 5;
  if (this->has_time_switch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_switch_);
  }

  // optional .Xenophobia.Voting voting = 6;
  if (this->has_voting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voting_);
  }

  // optional .Xenophobia.EndVoting end_voting = 7;
  if (this->has_end_voting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_voting_);
  }

  // optional .Xenophobia.Change change = 8;
  if (this->has_change()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_);
  }

  // optional .Xenophobia.InvetoryChange inventory_change = 9;
  if (this->has_inventory_change()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inventory_change_);
  }

  // optional .Xenophobia.PlayerChange player_change = 10;
  if (this->has_player_change()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_change_);
  }

  // optional .Xenophobia.ActionRequest action_request = 11;
  if (this->has_action_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_request_);
  }

  // optional .Xenophobia.ActionResult action_result = 12;
  if (this->has_action_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_register_answer()) {
    mutable_register_answer()->::Xenophobia::RegisterAnswer::MergeFrom(from.register_answer());
  }
  if (from.has_register_update()) {
    mutable_register_update()->::Xenophobia::RegisterUpdate::MergeFrom(from.register_update());
  }
  if (from.has_start_game()) {
    mutable_start_game()->::Xenophobia::StartGame::MergeFrom(from.start_game());
  }
  if (from.has_time_switch()) {
    mutable_time_switch()->::Xenophobia::TimeSwitch::MergeFrom(from.time_switch());
  }
  if (from.has_voting()) {
    mutable_voting()->::Xenophobia::Voting::MergeFrom(from.voting());
  }
  if (from.has_end_voting()) {
    mutable_end_voting()->::Xenophobia::EndVoting::MergeFrom(from.end_voting());
  }
  if (from.has_change()) {
    mutable_change()->::Xenophobia::Change::MergeFrom(from.change());
  }
  if (from.has_inventory_change()) {
    mutable_inventory_change()->::Xenophobia::InvetoryChange::MergeFrom(from.inventory_change());
  }
  if (from.has_player_change()) {
    mutable_player_change()->::Xenophobia::PlayerChange::MergeFrom(from.player_change());
  }
  if (from.has_action_request()) {
    mutable_action_request()->::Xenophobia::ActionRequest::MergeFrom(from.action_request());
  }
  if (from.has_action_result()) {
    mutable_action_result()->::Xenophobia::ActionResult::MergeFrom(from.action_result());
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {

  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  std::swap(type_, other->type_);
  std::swap(register_answer_, other->register_answer_);
  std::swap(register_update_, other->register_update_);
  std::swap(start_game_, other->start_game_);
  std::swap(time_switch_, other->time_switch_);
  std::swap(voting_, other->voting_);
  std::swap(end_voting_, other->end_voting_);
  std::swap(change_, other->change_);
  std::swap(inventory_change_, other->inventory_change_);
  std::swap(player_change_, other->player_change_);
  std::swap(action_request_, other->action_request_);
  std::swap(action_result_, other->action_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMessage

// optional .Xenophobia.ServerMessageType type = 1;
void ServerMessage::clear_type() {
  type_ = 0;
}
 ::Xenophobia::ServerMessageType ServerMessage::type() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.type)
  return static_cast< ::Xenophobia::ServerMessageType >(type_);
}
 void ServerMessage::set_type(::Xenophobia::ServerMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.ServerMessage.type)
}

// optional .Xenophobia.RegisterAnswer register_answer = 2;
bool ServerMessage::has_register_answer() const {
  return !_is_default_instance_ && register_answer_ != NULL;
}
void ServerMessage::clear_register_answer() {
  if (GetArenaNoVirtual() == NULL && register_answer_ != NULL) delete register_answer_;
  register_answer_ = NULL;
}
const ::Xenophobia::RegisterAnswer& ServerMessage::register_answer() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.register_answer)
  return register_answer_ != NULL ? *register_answer_ : *default_instance_->register_answer_;
}
::Xenophobia::RegisterAnswer* ServerMessage::mutable_register_answer() {
  
  if (register_answer_ == NULL) {
    register_answer_ = new ::Xenophobia::RegisterAnswer;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.register_answer)
  return register_answer_;
}
::Xenophobia::RegisterAnswer* ServerMessage::release_register_answer() {
  
  ::Xenophobia::RegisterAnswer* temp = register_answer_;
  register_answer_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_register_answer(::Xenophobia::RegisterAnswer* register_answer) {
  delete register_answer_;
  register_answer_ = register_answer;
  if (register_answer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.register_answer)
}

// optional .Xenophobia.RegisterUpdate register_update = 3;
bool ServerMessage::has_register_update() const {
  return !_is_default_instance_ && register_update_ != NULL;
}
void ServerMessage::clear_register_update() {
  if (GetArenaNoVirtual() == NULL && register_update_ != NULL) delete register_update_;
  register_update_ = NULL;
}
const ::Xenophobia::RegisterUpdate& ServerMessage::register_update() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.register_update)
  return register_update_ != NULL ? *register_update_ : *default_instance_->register_update_;
}
::Xenophobia::RegisterUpdate* ServerMessage::mutable_register_update() {
  
  if (register_update_ == NULL) {
    register_update_ = new ::Xenophobia::RegisterUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.register_update)
  return register_update_;
}
::Xenophobia::RegisterUpdate* ServerMessage::release_register_update() {
  
  ::Xenophobia::RegisterUpdate* temp = register_update_;
  register_update_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_register_update(::Xenophobia::RegisterUpdate* register_update) {
  delete register_update_;
  register_update_ = register_update;
  if (register_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.register_update)
}

// optional .Xenophobia.StartGame start_game = 4;
bool ServerMessage::has_start_game() const {
  return !_is_default_instance_ && start_game_ != NULL;
}
void ServerMessage::clear_start_game() {
  if (GetArenaNoVirtual() == NULL && start_game_ != NULL) delete start_game_;
  start_game_ = NULL;
}
const ::Xenophobia::StartGame& ServerMessage::start_game() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.start_game)
  return start_game_ != NULL ? *start_game_ : *default_instance_->start_game_;
}
::Xenophobia::StartGame* ServerMessage::mutable_start_game() {
  
  if (start_game_ == NULL) {
    start_game_ = new ::Xenophobia::StartGame;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.start_game)
  return start_game_;
}
::Xenophobia::StartGame* ServerMessage::release_start_game() {
  
  ::Xenophobia::StartGame* temp = start_game_;
  start_game_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_start_game(::Xenophobia::StartGame* start_game) {
  delete start_game_;
  start_game_ = start_game;
  if (start_game) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.start_game)
}

// optional .Xenophobia.TimeSwitch time_switch = 5;
bool ServerMessage::has_time_switch() const {
  return !_is_default_instance_ && time_switch_ != NULL;
}
void ServerMessage::clear_time_switch() {
  if (GetArenaNoVirtual() == NULL && time_switch_ != NULL) delete time_switch_;
  time_switch_ = NULL;
}
const ::Xenophobia::TimeSwitch& ServerMessage::time_switch() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.time_switch)
  return time_switch_ != NULL ? *time_switch_ : *default_instance_->time_switch_;
}
::Xenophobia::TimeSwitch* ServerMessage::mutable_time_switch() {
  
  if (time_switch_ == NULL) {
    time_switch_ = new ::Xenophobia::TimeSwitch;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.time_switch)
  return time_switch_;
}
::Xenophobia::TimeSwitch* ServerMessage::release_time_switch() {
  
  ::Xenophobia::TimeSwitch* temp = time_switch_;
  time_switch_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_time_switch(::Xenophobia::TimeSwitch* time_switch) {
  delete time_switch_;
  time_switch_ = time_switch;
  if (time_switch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.time_switch)
}

// optional .Xenophobia.Voting voting = 6;
bool ServerMessage::has_voting() const {
  return !_is_default_instance_ && voting_ != NULL;
}
void ServerMessage::clear_voting() {
  if (GetArenaNoVirtual() == NULL && voting_ != NULL) delete voting_;
  voting_ = NULL;
}
const ::Xenophobia::Voting& ServerMessage::voting() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.voting)
  return voting_ != NULL ? *voting_ : *default_instance_->voting_;
}
::Xenophobia::Voting* ServerMessage::mutable_voting() {
  
  if (voting_ == NULL) {
    voting_ = new ::Xenophobia::Voting;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.voting)
  return voting_;
}
::Xenophobia::Voting* ServerMessage::release_voting() {
  
  ::Xenophobia::Voting* temp = voting_;
  voting_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_voting(::Xenophobia::Voting* voting) {
  delete voting_;
  voting_ = voting;
  if (voting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.voting)
}

// optional .Xenophobia.EndVoting end_voting = 7;
bool ServerMessage::has_end_voting() const {
  return !_is_default_instance_ && end_voting_ != NULL;
}
void ServerMessage::clear_end_voting() {
  if (GetArenaNoVirtual() == NULL && end_voting_ != NULL) delete end_voting_;
  end_voting_ = NULL;
}
const ::Xenophobia::EndVoting& ServerMessage::end_voting() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.end_voting)
  return end_voting_ != NULL ? *end_voting_ : *default_instance_->end_voting_;
}
::Xenophobia::EndVoting* ServerMessage::mutable_end_voting() {
  
  if (end_voting_ == NULL) {
    end_voting_ = new ::Xenophobia::EndVoting;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.end_voting)
  return end_voting_;
}
::Xenophobia::EndVoting* ServerMessage::release_end_voting() {
  
  ::Xenophobia::EndVoting* temp = end_voting_;
  end_voting_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_end_voting(::Xenophobia::EndVoting* end_voting) {
  delete end_voting_;
  end_voting_ = end_voting;
  if (end_voting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.end_voting)
}

// optional .Xenophobia.Change change = 8;
bool ServerMessage::has_change() const {
  return !_is_default_instance_ && change_ != NULL;
}
void ServerMessage::clear_change() {
  if (GetArenaNoVirtual() == NULL && change_ != NULL) delete change_;
  change_ = NULL;
}
const ::Xenophobia::Change& ServerMessage::change() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.change)
  return change_ != NULL ? *change_ : *default_instance_->change_;
}
::Xenophobia::Change* ServerMessage::mutable_change() {
  
  if (change_ == NULL) {
    change_ = new ::Xenophobia::Change;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.change)
  return change_;
}
::Xenophobia::Change* ServerMessage::release_change() {
  
  ::Xenophobia::Change* temp = change_;
  change_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_change(::Xenophobia::Change* change) {
  delete change_;
  change_ = change;
  if (change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.change)
}

// optional .Xenophobia.InvetoryChange inventory_change = 9;
bool ServerMessage::has_inventory_change() const {
  return !_is_default_instance_ && inventory_change_ != NULL;
}
void ServerMessage::clear_inventory_change() {
  if (GetArenaNoVirtual() == NULL && inventory_change_ != NULL) delete inventory_change_;
  inventory_change_ = NULL;
}
const ::Xenophobia::InvetoryChange& ServerMessage::inventory_change() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.inventory_change)
  return inventory_change_ != NULL ? *inventory_change_ : *default_instance_->inventory_change_;
}
::Xenophobia::InvetoryChange* ServerMessage::mutable_inventory_change() {
  
  if (inventory_change_ == NULL) {
    inventory_change_ = new ::Xenophobia::InvetoryChange;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.inventory_change)
  return inventory_change_;
}
::Xenophobia::InvetoryChange* ServerMessage::release_inventory_change() {
  
  ::Xenophobia::InvetoryChange* temp = inventory_change_;
  inventory_change_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_inventory_change(::Xenophobia::InvetoryChange* inventory_change) {
  delete inventory_change_;
  inventory_change_ = inventory_change;
  if (inventory_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.inventory_change)
}

// optional .Xenophobia.PlayerChange player_change = 10;
bool ServerMessage::has_player_change() const {
  return !_is_default_instance_ && player_change_ != NULL;
}
void ServerMessage::clear_player_change() {
  if (GetArenaNoVirtual() == NULL && player_change_ != NULL) delete player_change_;
  player_change_ = NULL;
}
const ::Xenophobia::PlayerChange& ServerMessage::player_change() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.player_change)
  return player_change_ != NULL ? *player_change_ : *default_instance_->player_change_;
}
::Xenophobia::PlayerChange* ServerMessage::mutable_player_change() {
  
  if (player_change_ == NULL) {
    player_change_ = new ::Xenophobia::PlayerChange;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.player_change)
  return player_change_;
}
::Xenophobia::PlayerChange* ServerMessage::release_player_change() {
  
  ::Xenophobia::PlayerChange* temp = player_change_;
  player_change_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_player_change(::Xenophobia::PlayerChange* player_change) {
  delete player_change_;
  player_change_ = player_change;
  if (player_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.player_change)
}

// optional .Xenophobia.ActionRequest action_request = 11;
bool ServerMessage::has_action_request() const {
  return !_is_default_instance_ && action_request_ != NULL;
}
void ServerMessage::clear_action_request() {
  if (GetArenaNoVirtual() == NULL && action_request_ != NULL) delete action_request_;
  action_request_ = NULL;
}
const ::Xenophobia::ActionRequest& ServerMessage::action_request() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.action_request)
  return action_request_ != NULL ? *action_request_ : *default_instance_->action_request_;
}
::Xenophobia::ActionRequest* ServerMessage::mutable_action_request() {
  
  if (action_request_ == NULL) {
    action_request_ = new ::Xenophobia::ActionRequest;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.action_request)
  return action_request_;
}
::Xenophobia::ActionRequest* ServerMessage::release_action_request() {
  
  ::Xenophobia::ActionRequest* temp = action_request_;
  action_request_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_action_request(::Xenophobia::ActionRequest* action_request) {
  delete action_request_;
  action_request_ = action_request;
  if (action_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.action_request)
}

// optional .Xenophobia.ActionResult action_result = 12;
bool ServerMessage::has_action_result() const {
  return !_is_default_instance_ && action_result_ != NULL;
}
void ServerMessage::clear_action_result() {
  if (GetArenaNoVirtual() == NULL && action_result_ != NULL) delete action_result_;
  action_result_ = NULL;
}
const ::Xenophobia::ActionResult& ServerMessage::action_result() const {
  // @@protoc_insertion_point(field_get:Xenophobia.ServerMessage.action_result)
  return action_result_ != NULL ? *action_result_ : *default_instance_->action_result_;
}
::Xenophobia::ActionResult* ServerMessage::mutable_action_result() {
  
  if (action_result_ == NULL) {
    action_result_ = new ::Xenophobia::ActionResult;
  }
  // @@protoc_insertion_point(field_mutable:Xenophobia.ServerMessage.action_result)
  return action_result_;
}
::Xenophobia::ActionResult* ServerMessage::release_action_result() {
  
  ::Xenophobia::ActionResult* temp = action_result_;
  action_result_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_action_result(::Xenophobia::ActionResult* action_result) {
  delete action_result_;
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.ServerMessage.action_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Xenophobia

// @@protoc_insertion_point(global_scope)
