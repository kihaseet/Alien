// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Xenophobia {

namespace {

const ::google::protobuf::Descriptor* RegisterName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterName_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* Disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoAction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterName_descriptor_ = file->message_type(0);
  static const int RegisterName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, name_),
  };
  RegisterName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterName_descriptor_,
      RegisterName::default_instance_,
      RegisterName_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterName, _is_default_instance_));
  RegisterRole_descriptor_ = file->message_type(1);
  static const int RegisterRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, role_),
  };
  RegisterRole_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRole_descriptor_,
      RegisterRole::default_instance_,
      RegisterRole_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterRole),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRole, _is_default_instance_));
  Disconnect_descriptor_ = file->message_type(2);
  static const int Disconnect_offsets_[1] = {
  };
  Disconnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Disconnect_descriptor_,
      Disconnect::default_instance_,
      Disconnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Disconnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _is_default_instance_));
  DoAction_descriptor_ = file->message_type(3);
  static const int DoAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, targets_),
  };
  DoAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoAction_descriptor_,
      DoAction::default_instance_,
      DoAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(DoAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoAction, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterName_descriptor_, &RegisterName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRole_descriptor_, &RegisterRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Disconnect_descriptor_, &Disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoAction_descriptor_, &DoAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete RegisterName::default_instance_;
  delete RegisterName_reflection_;
  delete RegisterRole::default_instance_;
  delete RegisterRole_reflection_;
  delete Disconnect::default_instance_;
  delete Disconnect_reflection_;
  delete DoAction::default_instance_;
  delete DoAction_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::types::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\nXenophobia\032\013types.proto\""
    "\034\n\014RegisterName\022\014\n\004name\030\001 \001(\t\")\n\014Registe"
    "rRole\022\031\n\004role\030\001 \001(\0162\013.types.Role\"\014\n\nDisc"
    "onnect\"e\n\010DoAction\022\035\n\006action\030\001 \001(\0162\r.typ"
    "es.Action\022\031\n\004item\030\002 \001(\0162\013.types.Item\022\037\n\007"
    "targets\030\003 \003(\0132\016.types.ITargetP\000b\006proto3", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  RegisterName::default_instance_ = new RegisterName();
  RegisterRole::default_instance_ = new RegisterRole();
  Disconnect::default_instance_ = new Disconnect();
  DoAction::default_instance_ = new DoAction();
  RegisterName::default_instance_->InitAsDefaultInstance();
  RegisterRole::default_instance_->InitAsDefaultInstance();
  Disconnect::default_instance_->InitAsDefaultInstance();
  DoAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterName::RegisterName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterName)
}

void RegisterName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterName::RegisterName(const RegisterName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterName)
}

void RegisterName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterName::~RegisterName() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterName)
  SharedDtor();
}

void RegisterName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterName_descriptor_;
}

const RegisterName& RegisterName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RegisterName* RegisterName::default_instance_ = NULL;

RegisterName* RegisterName::New(::google::protobuf::Arena* arena) const {
  RegisterName* n = new RegisterName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterName::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Xenophobia.RegisterName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterName)
  return false;
#undef DO_
}

void RegisterName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.RegisterName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterName)
}

::google::protobuf::uint8* RegisterName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Xenophobia.RegisterName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterName)
  return target;
}

int RegisterName::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterName::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterName>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterName::MergeFrom(const RegisterName& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RegisterName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterName::CopyFrom(const RegisterName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterName::IsInitialized() const {

  return true;
}

void RegisterName::Swap(RegisterName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterName::InternalSwap(RegisterName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterName_descriptor_;
  metadata.reflection = RegisterName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterName

// optional string name = 1;
void RegisterName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterName::name() const {
  // @@protoc_insertion_point(field_get:Xenophobia.RegisterName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Xenophobia.RegisterName.name)
}
 void RegisterName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xenophobia.RegisterName.name)
}
 void RegisterName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xenophobia.RegisterName.name)
}
 ::std::string* RegisterName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Xenophobia.RegisterName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterName::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Xenophobia.RegisterName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRole::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRole::RegisterRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.RegisterRole)
}

void RegisterRole::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRole::RegisterRole(const RegisterRole& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.RegisterRole)
}

void RegisterRole::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  role_ = 0;
}

RegisterRole::~RegisterRole() {
  // @@protoc_insertion_point(destructor:Xenophobia.RegisterRole)
  SharedDtor();
}

void RegisterRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRole_descriptor_;
}

const RegisterRole& RegisterRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RegisterRole* RegisterRole::default_instance_ = NULL;

RegisterRole* RegisterRole::New(::google::protobuf::Arena* arena) const {
  RegisterRole* n = new RegisterRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRole::Clear() {
  role_ = 0;
}

bool RegisterRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.RegisterRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Role role = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::types::Role >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.RegisterRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.RegisterRole)
  return false;
#undef DO_
}

void RegisterRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.RegisterRole)
  // optional .types.Role role = 1;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.RegisterRole)
}

::google::protobuf::uint8* RegisterRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.RegisterRole)
  // optional .types.Role role = 1;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.RegisterRole)
  return target;
}

int RegisterRole::ByteSize() const {
  int total_size = 0;

  // optional .types.Role role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRole::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterRole* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRole>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRole::MergeFrom(const RegisterRole& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void RegisterRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRole::CopyFrom(const RegisterRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRole::IsInitialized() const {

  return true;
}

void RegisterRole::Swap(RegisterRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRole::InternalSwap(RegisterRole* other) {
  std::swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRole_descriptor_;
  metadata.reflection = RegisterRole_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRole

// optional .types.Role role = 1;
void RegisterRole::clear_role() {
  role_ = 0;
}
 ::types::Role RegisterRole::role() const {
  // @@protoc_insertion_point(field_get:Xenophobia.RegisterRole.role)
  return static_cast< ::types::Role >(role_);
}
 void RegisterRole::set_role(::types::Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.RegisterRole.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disconnect::Disconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.Disconnect)
}

void Disconnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Disconnect::Disconnect(const Disconnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.Disconnect)
}

void Disconnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Disconnect::~Disconnect() {
  // @@protoc_insertion_point(destructor:Xenophobia.Disconnect)
  SharedDtor();
}

void Disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disconnect_descriptor_;
}

const Disconnect& Disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

Disconnect* Disconnect::default_instance_ = NULL;

Disconnect* Disconnect::New(::google::protobuf::Arena* arena) const {
  Disconnect* n = new Disconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Disconnect::Clear() {
}

bool Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.Disconnect)
  return false;
#undef DO_
}

void Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.Disconnect)
  // @@protoc_insertion_point(serialize_end:Xenophobia.Disconnect)
}

::google::protobuf::uint8* Disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.Disconnect)
  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.Disconnect)
  return target;
}

int Disconnect::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Disconnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Disconnect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Disconnect::MergeFrom(const Disconnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disconnect::CopyFrom(const Disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnect::IsInitialized() const {

  return true;
}

void Disconnect::Swap(Disconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Disconnect::InternalSwap(Disconnect* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disconnect_descriptor_;
  metadata.reflection = Disconnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Disconnect

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoAction::kActionFieldNumber;
const int DoAction::kItemFieldNumber;
const int DoAction::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoAction::DoAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xenophobia.DoAction)
}

void DoAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DoAction::DoAction(const DoAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Xenophobia.DoAction)
}

void DoAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  action_ = 0;
  item_ = 0;
}

DoAction::~DoAction() {
  // @@protoc_insertion_point(destructor:Xenophobia.DoAction)
  SharedDtor();
}

void DoAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoAction_descriptor_;
}

const DoAction& DoAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

DoAction* DoAction::default_instance_ = NULL;

DoAction* DoAction::New(::google::protobuf::Arena* arena) const {
  DoAction* n = new DoAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DoAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(action_, item_);

#undef ZR_HELPER_
#undef ZR_

  targets_.Clear();
}

bool DoAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Xenophobia.DoAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::types::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional .types.Item item = 2;
      case 2: {
        if (tag == 16) {
         parse_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item(static_cast< ::types::Item >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .types.ITarget targets = 3;
      case 3: {
        if (tag == 26) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Xenophobia.DoAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Xenophobia.DoAction)
  return false;
#undef DO_
}

void DoAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Xenophobia.DoAction)
  // optional .types.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->item(), output);
  }

  // repeated .types.ITarget targets = 3;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Xenophobia.DoAction)
}

::google::protobuf::uint8* DoAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xenophobia.DoAction)
  // optional .types.Action action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->item(), target);
  }

  // repeated .types.ITarget targets = 3;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Xenophobia.DoAction)
  return target;
}

int DoAction::ByteSize() const {
  int total_size = 0;

  // optional .types.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional .types.Item item = 2;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item());
  }

  // repeated .types.ITarget targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoAction::MergeFrom(const DoAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targets_.MergeFrom(from.targets_);
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
}

void DoAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoAction::CopyFrom(const DoAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoAction::IsInitialized() const {

  return true;
}

void DoAction::Swap(DoAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoAction::InternalSwap(DoAction* other) {
  std::swap(action_, other->action_);
  std::swap(item_, other->item_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoAction_descriptor_;
  metadata.reflection = DoAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoAction

// optional .types.Action action = 1;
void DoAction::clear_action() {
  action_ = 0;
}
 ::types::Action DoAction::action() const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.action)
  return static_cast< ::types::Action >(action_);
}
 void DoAction::set_action(::types::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.DoAction.action)
}

// optional .types.Item item = 2;
void DoAction::clear_item() {
  item_ = 0;
}
 ::types::Item DoAction::item() const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.item)
  return static_cast< ::types::Item >(item_);
}
 void DoAction::set_item(::types::Item value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:Xenophobia.DoAction.item)
}

// repeated .types.ITarget targets = 3;
int DoAction::targets_size() const {
  return targets_.size();
}
void DoAction::clear_targets() {
  targets_.Clear();
}
const ::types::ITarget& DoAction::targets(int index) const {
  // @@protoc_insertion_point(field_get:Xenophobia.DoAction.targets)
  return targets_.Get(index);
}
::types::ITarget* DoAction::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:Xenophobia.DoAction.targets)
  return targets_.Mutable(index);
}
::types::ITarget* DoAction::add_targets() {
  // @@protoc_insertion_point(field_add:Xenophobia.DoAction.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::types::ITarget >*
DoAction::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Xenophobia.DoAction.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::types::ITarget >&
DoAction::targets() const {
  // @@protoc_insertion_point(field_list:Xenophobia.DoAction.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Xenophobia

// @@protoc_insertion_point(global_scope)
