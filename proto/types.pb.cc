// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace types {

namespace {

const ::google::protobuf::Descriptor* ITarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ITarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Role_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Item_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VotingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_types_2eproto() {
  protobuf_AddDesc_types_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "types.proto");
  GOOGLE_CHECK(file != NULL);
  ITarget_descriptor_ = file->message_type(0);
  static const int ITarget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, role_),
  };
  ITarget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ITarget_descriptor_,
      ITarget::default_instance_,
      ITarget_offsets_,
      -1,
      -1,
      -1,
      sizeof(ITarget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITarget, _is_default_instance_));
  Event_descriptor_ = file->message_type(1);
  static const int Event_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_who_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_target_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  Role_descriptor_ = file->enum_type(0);
  Action_descriptor_ = file->enum_type(1);
  Item_descriptor_ = file->enum_type(2);
  PlayerStatus_descriptor_ = file->enum_type(3);
  EventType_descriptor_ = file->enum_type(4);
  VotingType_descriptor_ = file->enum_type(5);
  TargetType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_types_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ITarget_descriptor_, &ITarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_types_2eproto() {
  delete ITarget::default_instance_;
  delete ITarget_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_types_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013types.proto\022\005types\"n\n\007ITarget\022\037\n\004type\030"
    "\001 \001(\0162\021.types.TargetType\022\014\n\004name\030\002 \001(\t\022\031"
    "\n\004item\030\003 \001(\0162\013.types.Item\022\031\n\004role\030\004 \001(\0162"
    "\013.types.Role\"\227\001\n\005Event\022\037\n\005event\030\001 \001(\0162\020."
    "types.EventType\022!\n\tevent_who\030\002 \001(\0132\016.typ"
    "es.ITarget\022$\n\014event_object\030\003 \001(\0132\016.types"
    ".ITarget\022$\n\014event_target\030\004 \001(\0132\016.types.I"
    "Target*\315\001\n\004Role\022\r\n\tPASSENGER\020\000\022\013\n\007CAPTAI"
    "N\020\001\022\n\n\006DOCTOR\020\002\022\n\n\006GUNMEN\020\003\022\014\n\010ENGINEER\020"
    "\004\022\r\n\tSCIENTIST\020\005\022\r\n\tSIGNALMEN\020\006\022\r\n\tASSIS"
    "TANT\020e\022\016\n\nDEP_DOCTOR\020f\022\016\n\nDEP_GUNMEN\020g\022\020"
    "\n\014DEP_ENGINEER\020h\022\021\n\rDEP_SCIENTIST\020i\022\021\n\rD"
    "EP_SIGNALMEN\020j*|\n\006Action\022\014\n\010USE_ITEM\020\000\022\013"
    "\n\007USE_ULT\020\001\022\r\n\tUSE_BADGE\020\002\022\n\n\006ATTACK\020\003\022\n"
    "\n\006INFECT\020\004\022\010\n\004VOTE\020\005\022\n\n\006UNVOTE\020\006\022\010\n\004WAIT"
    "\020\007\022\006\n\002UP\020\010\022\010\n\004DOWN\020\t*v\n\004Item\022\t\n\005BADGE\020\000\022"
    "\014\n\010ROTATION\020\001\022\013\n\007BLASTER\020\002\022\014\n\010INJECTOR\020\003"
    "\022\014\n\010NOTEBOOK\020\004\022\013\n\007BATTERY\020\005\022\013\n\007SCANNER\020\006"
    "\022\007\n\003MOP\020\007\022\t\n\005FETUS\020\010*3\n\014PlayerStatus\022\t\n\005"
    "PS_UP\020\000\022\013\n\007PS_DOWN\020\001\022\013\n\007PS_DEAD\020\002*\234\001\n\tEv"
    "entType\022\017\n\013ET_USE_ITEM\020\000\022\016\n\nET_USE_ULT\020\001"
    "\022\020\n\014ET_USE_BADGE\020\002\022\024\n\020ET_CHANGE_STATUS\020\003"
    "\022\017\n\013ET_GET_ROLE\020\004\022\017\n\013ET_DEL_ROLE\020\005\022\020\n\014ET"
    "_VOTING_UP\020\006\022\022\n\016ET_VOTING_DOWN\020\007*)\n\nVoti"
    "ngType\022\014\n\010FOR_ROLE\020\000\022\r\n\tFOR_ALIEN\020\001*6\n\nT"
    "argetType\022\014\n\010TAT_NAME\020\000\022\014\n\010TAT_ITEM\020\001\022\014\n"
    "\010TAT_ROLE\020\002b\006proto3", 1059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  ITarget::default_instance_ = new ITarget();
  Event::default_instance_ = new Event();
  ITarget::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_types_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_types_2eproto {
  StaticDescriptorInitializer_types_2eproto() {
    protobuf_AddDesc_types_2eproto();
  }
} static_descriptor_initializer_types_2eproto_;
const ::google::protobuf::EnumDescriptor* Role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}
bool Role_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}
bool Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Item_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}
bool Item_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatus_descriptor_;
}
bool PlayerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_descriptor_;
}
bool EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VotingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingType_descriptor_;
}
bool VotingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetType_descriptor_;
}
bool TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ITarget::kTypeFieldNumber;
const int ITarget::kNameFieldNumber;
const int ITarget::kItemFieldNumber;
const int ITarget::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ITarget::ITarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.ITarget)
}

void ITarget::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ITarget::ITarget(const ITarget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:types.ITarget)
}

void ITarget::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_ = 0;
  role_ = 0;
}

ITarget::~ITarget() {
  // @@protoc_insertion_point(destructor:types.ITarget)
  SharedDtor();
}

void ITarget::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ITarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ITarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITarget_descriptor_;
}

const ITarget& ITarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_types_2eproto();
  return *default_instance_;
}

ITarget* ITarget::default_instance_ = NULL;

ITarget* ITarget::New(::google::protobuf::Arena* arena) const {
  ITarget* n = new ITarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ITarget::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ITarget*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, role_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ITarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.ITarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.TargetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::types::TargetType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "types.ITarget.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional .types.Item item = 3;
      case 3: {
        if (tag == 24) {
         parse_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item(static_cast< ::types::Item >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_role;
        break;
      }

      // optional .types.Role role = 4;
      case 4: {
        if (tag == 32) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::types::Role >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.ITarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.ITarget)
  return false;
#undef DO_
}

void ITarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.ITarget)
  // optional .types.TargetType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "types.ITarget.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .types.Item item = 3;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->item(), output);
  }

  // optional .types.Role role = 4;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:types.ITarget)
}

::google::protobuf::uint8* ITarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ITarget)
  // optional .types.TargetType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "types.ITarget.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .types.Item item = 3;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->item(), target);
  }

  // optional .types.Role role = 4;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:types.ITarget)
  return target;
}

int ITarget::ByteSize() const {
  int total_size = 0;

  // optional .types.TargetType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .types.Item item = 3;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item());
  }

  // optional .types.Role role = 4;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ITarget::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ITarget* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ITarget>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ITarget::MergeFrom(const ITarget& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void ITarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ITarget::CopyFrom(const ITarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ITarget::IsInitialized() const {

  return true;
}

void ITarget::Swap(ITarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ITarget::InternalSwap(ITarget* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(item_, other->item_);
  std::swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ITarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ITarget_descriptor_;
  metadata.reflection = ITarget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ITarget

// optional .types.TargetType type = 1;
void ITarget::clear_type() {
  type_ = 0;
}
 ::types::TargetType ITarget::type() const {
  // @@protoc_insertion_point(field_get:types.ITarget.type)
  return static_cast< ::types::TargetType >(type_);
}
 void ITarget::set_type(::types::TargetType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:types.ITarget.type)
}

// optional string name = 2;
void ITarget::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ITarget::name() const {
  // @@protoc_insertion_point(field_get:types.ITarget.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ITarget::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:types.ITarget.name)
}
 void ITarget::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.ITarget.name)
}
 void ITarget::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.ITarget.name)
}
 ::std::string* ITarget::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:types.ITarget.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ITarget::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ITarget::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:types.ITarget.name)
}

// optional .types.Item item = 3;
void ITarget::clear_item() {
  item_ = 0;
}
 ::types::Item ITarget::item() const {
  // @@protoc_insertion_point(field_get:types.ITarget.item)
  return static_cast< ::types::Item >(item_);
}
 void ITarget::set_item(::types::Item value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:types.ITarget.item)
}

// optional .types.Role role = 4;
void ITarget::clear_role() {
  role_ = 0;
}
 ::types::Role ITarget::role() const {
  // @@protoc_insertion_point(field_get:types.ITarget.role)
  return static_cast< ::types::Role >(role_);
}
 void ITarget::set_role(::types::Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:types.ITarget.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kEventFieldNumber;
const int Event::kEventWhoFieldNumber;
const int Event::kEventObjectFieldNumber;
const int Event::kEventTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  event_who_ = const_cast< ::types::ITarget*>(&::types::ITarget::default_instance());
  event_object_ = const_cast< ::types::ITarget*>(&::types::ITarget::default_instance());
  event_target_ = const_cast< ::types::ITarget*>(&::types::ITarget::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:types.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  event_ = 0;
  event_who_ = NULL;
  event_object_ = NULL;
  event_target_ = NULL;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:types.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete event_who_;
    delete event_object_;
    delete event_target_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_types_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
  event_ = 0;
  if (GetArenaNoVirtual() == NULL && event_who_ != NULL) delete event_who_;
  event_who_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_object_ != NULL) delete event_object_;
  event_object_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_target_ != NULL) delete event_target_;
  event_target_ = NULL;
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.EventType event = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::types::EventType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_who;
        break;
      }

      // optional .types.ITarget event_who = 2;
      case 2: {
        if (tag == 18) {
         parse_event_who:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_who()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event_object;
        break;
      }

      // optional .types.ITarget event_object = 3;
      case 3: {
        if (tag == 26) {
         parse_event_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event_target;
        break;
      }

      // optional .types.ITarget event_target = 4;
      case 4: {
        if (tag == 34) {
         parse_event_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.Event)
  // optional .types.EventType event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // optional .types.ITarget event_who = 2;
  if (this->has_event_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->event_who_, output);
  }

  // optional .types.ITarget event_object = 3;
  if (this->has_event_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->event_object_, output);
  }

  // optional .types.ITarget event_target = 4;
  if (this->has_event_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->event_target_, output);
  }

  // @@protoc_insertion_point(serialize_end:types.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Event)
  // optional .types.EventType event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // optional .types.ITarget event_who = 2;
  if (this->has_event_who()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->event_who_, target);
  }

  // optional .types.ITarget event_object = 3;
  if (this->has_event_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->event_object_, target);
  }

  // optional .types.ITarget event_target = 4;
  if (this->has_event_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->event_target_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:types.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  // optional .types.EventType event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  // optional .types.ITarget event_who = 2;
  if (this->has_event_who()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_who_);
  }

  // optional .types.ITarget event_object = 3;
  if (this->has_event_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_object_);
  }

  // optional .types.ITarget event_target = 4;
  if (this->has_event_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_target_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.event() != 0) {
    set_event(from.event());
  }
  if (from.has_event_who()) {
    mutable_event_who()->::types::ITarget::MergeFrom(from.event_who());
  }
  if (from.has_event_object()) {
    mutable_event_object()->::types::ITarget::MergeFrom(from.event_object());
  }
  if (from.has_event_target()) {
    mutable_event_target()->::types::ITarget::MergeFrom(from.event_target());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(event_, other->event_);
  std::swap(event_who_, other->event_who_);
  std::swap(event_object_, other->event_object_);
  std::swap(event_target_, other->event_target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .types.EventType event = 1;
void Event::clear_event() {
  event_ = 0;
}
 ::types::EventType Event::event() const {
  // @@protoc_insertion_point(field_get:types.Event.event)
  return static_cast< ::types::EventType >(event_);
}
 void Event::set_event(::types::EventType value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:types.Event.event)
}

// optional .types.ITarget event_who = 2;
bool Event::has_event_who() const {
  return !_is_default_instance_ && event_who_ != NULL;
}
void Event::clear_event_who() {
  if (GetArenaNoVirtual() == NULL && event_who_ != NULL) delete event_who_;
  event_who_ = NULL;
}
const ::types::ITarget& Event::event_who() const {
  // @@protoc_insertion_point(field_get:types.Event.event_who)
  return event_who_ != NULL ? *event_who_ : *default_instance_->event_who_;
}
::types::ITarget* Event::mutable_event_who() {
  
  if (event_who_ == NULL) {
    event_who_ = new ::types::ITarget;
  }
  // @@protoc_insertion_point(field_mutable:types.Event.event_who)
  return event_who_;
}
::types::ITarget* Event::release_event_who() {
  
  ::types::ITarget* temp = event_who_;
  event_who_ = NULL;
  return temp;
}
void Event::set_allocated_event_who(::types::ITarget* event_who) {
  delete event_who_;
  event_who_ = event_who;
  if (event_who) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:types.Event.event_who)
}

// optional .types.ITarget event_object = 3;
bool Event::has_event_object() const {
  return !_is_default_instance_ && event_object_ != NULL;
}
void Event::clear_event_object() {
  if (GetArenaNoVirtual() == NULL && event_object_ != NULL) delete event_object_;
  event_object_ = NULL;
}
const ::types::ITarget& Event::event_object() const {
  // @@protoc_insertion_point(field_get:types.Event.event_object)
  return event_object_ != NULL ? *event_object_ : *default_instance_->event_object_;
}
::types::ITarget* Event::mutable_event_object() {
  
  if (event_object_ == NULL) {
    event_object_ = new ::types::ITarget;
  }
  // @@protoc_insertion_point(field_mutable:types.Event.event_object)
  return event_object_;
}
::types::ITarget* Event::release_event_object() {
  
  ::types::ITarget* temp = event_object_;
  event_object_ = NULL;
  return temp;
}
void Event::set_allocated_event_object(::types::ITarget* event_object) {
  delete event_object_;
  event_object_ = event_object;
  if (event_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:types.Event.event_object)
}

// optional .types.ITarget event_target = 4;
bool Event::has_event_target() const {
  return !_is_default_instance_ && event_target_ != NULL;
}
void Event::clear_event_target() {
  if (GetArenaNoVirtual() == NULL && event_target_ != NULL) delete event_target_;
  event_target_ = NULL;
}
const ::types::ITarget& Event::event_target() const {
  // @@protoc_insertion_point(field_get:types.Event.event_target)
  return event_target_ != NULL ? *event_target_ : *default_instance_->event_target_;
}
::types::ITarget* Event::mutable_event_target() {
  
  if (event_target_ == NULL) {
    event_target_ = new ::types::ITarget;
  }
  // @@protoc_insertion_point(field_mutable:types.Event.event_target)
  return event_target_;
}
::types::ITarget* Event::release_event_target() {
  
  ::types::ITarget* temp = event_target_;
  event_target_ = NULL;
  return temp;
}
void Event::set_allocated_event_target(::types::ITarget* event_target) {
  delete event_target_;
  event_target_ = event_target;
  if (event_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:types.Event.event_target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace types

// @@protoc_insertion_point(global_scope)
